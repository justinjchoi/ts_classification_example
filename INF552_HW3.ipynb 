{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Homework 3\n",
    "## INF 552: Machine Learning for Data Informatics \n",
    "### Jungho Choi (junghoch@usc.edu) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.Time Series Classification\n",
    "\n",
    "An interesting task in machine learning is classification of time series. In this problem,\n",
    "we will classify the activities of humans based on time series obtained by a Wireless\n",
    "Sensor Network."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(a) Download the AReM data from: https://archive.ics.uci.edu/ml/datasets/Activity+Recognition+system+based+on+Multisensor+data+fusion+%28AReM%29. The dataset contains 7 folders that represent seven types of activities. In each folder, there are multiple files each of which represents an instant of a human performing an activity. Each file containis 6 time series collected from activities of the same person, which are called avg rss12, var rss12, avg rss13, var rss13, vg rss23, and ar rss23. There are 88 instances in the dataset, each of which contains 6 time series and each time series has 480 consecutive values.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import bootstrapped.bootstrap as bs\n",
    "import bootstrapped.stats_functions as bs_stats\n",
    "import seaborn as sb\n",
    "import matplotlib.pyplot as plt\n",
    "from os.path import join\n",
    "#import statsmodels.discrete.discrete_model as sm\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "from sklearn.utils import shuffle\n",
    "from sklearn.feature_selection import RFECV\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.linear_model import LogisticRegressionCV\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn import preprocessing\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.metrics import roc_curve\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(b) Keep datasets 1 and 2 in folders bending1 and bending 2, as well as datasets 1, 2, and 3 in other folders as test data and other datasets as train data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "activities = ['bending1','bending2','cycling','lying','sitting','standing','walking']\n",
    "datasetsNums = pd.Series([7, 6, 15, 15, 15, 15, 15], index=activities)\n",
    "\n",
    "train_data2 = []\n",
    "test_data2 = []\n",
    "\n",
    "for a in activities:\n",
    "    for i in range(1, datasetsNums[a] + 1):\n",
    "        data_path = join(\"AReM\", a, \"dataset\"+str(i)+\".csv\")\n",
    "        df = pd.read_csv(data_path,header=None, skiprows=range(0,5), delimiter=\",|\\s+\",engine='python')\n",
    "        if(i <= 2):\n",
    "            test_data2.append((df, a))\n",
    "        elif(a != 'bending1' and a != 'bending2' and i == 3):\n",
    "            test_data2.append((df, a))\n",
    "        else:\n",
    "            train_data2.append((df, a))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(c) Feature Extraction\n",
    "\n",
    "Classification of time series usually needs extracting features from them. In this problem, we focus on time-domain features."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "i. Research what types of time-domain features are usually used in time series classification and list them (examples are minimum, maximum, mean, etc)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- In time series classification, minimum, maximum, mean, median, standard deviation, 25% (first quartile) and 75% (third quartile) are used "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ii. Extract the time-domain features minimum, maximum, mean, median, standard deviation, first quartile, and third quartile for all of the 6 time series in each instance. You are free to normalize/standardize features or use them\n",
    "directly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>min1</th>\n",
       "      <th>max1</th>\n",
       "      <th>mean1</th>\n",
       "      <th>median1</th>\n",
       "      <th>std1</th>\n",
       "      <th>1st_quart1</th>\n",
       "      <th>3rd_quart1</th>\n",
       "      <th>min2</th>\n",
       "      <th>max2</th>\n",
       "      <th>mean2</th>\n",
       "      <th>...</th>\n",
       "      <th>1st_quart5</th>\n",
       "      <th>3rd_quart5</th>\n",
       "      <th>min6</th>\n",
       "      <th>max6</th>\n",
       "      <th>mean6</th>\n",
       "      <th>median6</th>\n",
       "      <th>std6</th>\n",
       "      <th>1st_quart6</th>\n",
       "      <th>3rd_quart6</th>\n",
       "      <th>activity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>37.25</td>\n",
       "      <td>45.00</td>\n",
       "      <td>40.624792</td>\n",
       "      <td>40.500</td>\n",
       "      <td>1.476967</td>\n",
       "      <td>39.2500</td>\n",
       "      <td>42.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.30</td>\n",
       "      <td>0.358604</td>\n",
       "      <td>...</td>\n",
       "      <td>33.0000</td>\n",
       "      <td>36.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.92</td>\n",
       "      <td>0.570583</td>\n",
       "      <td>0.430</td>\n",
       "      <td>0.582915</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1.3000</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>38.00</td>\n",
       "      <td>45.67</td>\n",
       "      <td>42.812812</td>\n",
       "      <td>42.500</td>\n",
       "      <td>1.435550</td>\n",
       "      <td>42.0000</td>\n",
       "      <td>43.6700</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.22</td>\n",
       "      <td>0.372437</td>\n",
       "      <td>...</td>\n",
       "      <td>32.0000</td>\n",
       "      <td>34.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.11</td>\n",
       "      <td>0.571083</td>\n",
       "      <td>0.430</td>\n",
       "      <td>0.601010</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1.3000</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12.75</td>\n",
       "      <td>51.00</td>\n",
       "      <td>24.562958</td>\n",
       "      <td>24.250</td>\n",
       "      <td>3.737514</td>\n",
       "      <td>23.1875</td>\n",
       "      <td>26.5000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.87</td>\n",
       "      <td>0.590833</td>\n",
       "      <td>...</td>\n",
       "      <td>20.5000</td>\n",
       "      <td>27.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.97</td>\n",
       "      <td>0.700188</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.693720</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>0.8700</td>\n",
       "      <td>bending2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.00</td>\n",
       "      <td>42.75</td>\n",
       "      <td>27.464604</td>\n",
       "      <td>28.000</td>\n",
       "      <td>3.583582</td>\n",
       "      <td>25.5000</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.76</td>\n",
       "      <td>0.449708</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0000</td>\n",
       "      <td>20.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.76</td>\n",
       "      <td>1.122125</td>\n",
       "      <td>0.830</td>\n",
       "      <td>1.012342</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.3000</td>\n",
       "      <td>bending2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>24.25</td>\n",
       "      <td>45.00</td>\n",
       "      <td>37.177042</td>\n",
       "      <td>36.250</td>\n",
       "      <td>3.581301</td>\n",
       "      <td>34.5000</td>\n",
       "      <td>40.2500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.58</td>\n",
       "      <td>2.374208</td>\n",
       "      <td>...</td>\n",
       "      <td>17.9500</td>\n",
       "      <td>21.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.34</td>\n",
       "      <td>2.921729</td>\n",
       "      <td>2.500</td>\n",
       "      <td>1.852600</td>\n",
       "      <td>1.5000</td>\n",
       "      <td>3.9000</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>28.75</td>\n",
       "      <td>44.75</td>\n",
       "      <td>37.561187</td>\n",
       "      <td>36.875</td>\n",
       "      <td>3.226507</td>\n",
       "      <td>35.2500</td>\n",
       "      <td>40.2500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.91</td>\n",
       "      <td>2.080687</td>\n",
       "      <td>...</td>\n",
       "      <td>18.0000</td>\n",
       "      <td>21.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.62</td>\n",
       "      <td>2.765896</td>\n",
       "      <td>2.450</td>\n",
       "      <td>1.769203</td>\n",
       "      <td>1.4100</td>\n",
       "      <td>3.7700</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>22.00</td>\n",
       "      <td>44.67</td>\n",
       "      <td>37.058708</td>\n",
       "      <td>36.000</td>\n",
       "      <td>3.710180</td>\n",
       "      <td>34.5000</td>\n",
       "      <td>40.0625</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14.17</td>\n",
       "      <td>2.438146</td>\n",
       "      <td>...</td>\n",
       "      <td>16.0000</td>\n",
       "      <td>21.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.55</td>\n",
       "      <td>2.983750</td>\n",
       "      <td>2.570</td>\n",
       "      <td>1.815730</td>\n",
       "      <td>1.5000</td>\n",
       "      <td>4.1500</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>23.50</td>\n",
       "      <td>30.00</td>\n",
       "      <td>27.716375</td>\n",
       "      <td>27.500</td>\n",
       "      <td>1.442253</td>\n",
       "      <td>27.0000</td>\n",
       "      <td>29.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.79</td>\n",
       "      <td>0.363687</td>\n",
       "      <td>...</td>\n",
       "      <td>5.5000</td>\n",
       "      <td>10.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.50</td>\n",
       "      <td>0.734271</td>\n",
       "      <td>0.710</td>\n",
       "      <td>0.613688</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>lying</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>24.75</td>\n",
       "      <td>48.33</td>\n",
       "      <td>44.182937</td>\n",
       "      <td>48.000</td>\n",
       "      <td>7.495615</td>\n",
       "      <td>48.0000</td>\n",
       "      <td>48.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.11</td>\n",
       "      <td>0.101875</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0000</td>\n",
       "      <td>5.5425</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.91</td>\n",
       "      <td>0.692771</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.675781</td>\n",
       "      <td>0.3225</td>\n",
       "      <td>0.9400</td>\n",
       "      <td>lying</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>48.00</td>\n",
       "      <td>48.25</td>\n",
       "      <td>48.004167</td>\n",
       "      <td>48.000</td>\n",
       "      <td>0.032038</td>\n",
       "      <td>48.0000</td>\n",
       "      <td>48.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.43</td>\n",
       "      <td>0.007167</td>\n",
       "      <td>...</td>\n",
       "      <td>4.6700</td>\n",
       "      <td>10.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.50</td>\n",
       "      <td>0.641229</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.388372</td>\n",
       "      <td>0.4600</td>\n",
       "      <td>0.8300</td>\n",
       "      <td>lying</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>33.25</td>\n",
       "      <td>48.00</td>\n",
       "      <td>42.363563</td>\n",
       "      <td>43.000</td>\n",
       "      <td>2.068247</td>\n",
       "      <td>42.0000</td>\n",
       "      <td>43.5000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.44</td>\n",
       "      <td>0.492563</td>\n",
       "      <td>...</td>\n",
       "      <td>10.1875</td>\n",
       "      <td>17.6900</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.02</td>\n",
       "      <td>1.034021</td>\n",
       "      <td>0.830</td>\n",
       "      <td>0.985627</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.2500</td>\n",
       "      <td>sitting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>37.00</td>\n",
       "      <td>50.75</td>\n",
       "      <td>45.917667</td>\n",
       "      <td>45.635</td>\n",
       "      <td>1.089027</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>46.5000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.87</td>\n",
       "      <td>0.324542</td>\n",
       "      <td>...</td>\n",
       "      <td>16.5000</td>\n",
       "      <td>21.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.22</td>\n",
       "      <td>0.904604</td>\n",
       "      <td>0.710</td>\n",
       "      <td>0.896171</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>1.1200</td>\n",
       "      <td>sitting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>44.50</td>\n",
       "      <td>46.75</td>\n",
       "      <td>45.239667</td>\n",
       "      <td>45.000</td>\n",
       "      <td>0.429915</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>45.3300</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.172958</td>\n",
       "      <td>...</td>\n",
       "      <td>17.6275</td>\n",
       "      <td>21.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.20</td>\n",
       "      <td>0.837250</td>\n",
       "      <td>0.710</td>\n",
       "      <td>0.835344</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>1.1200</td>\n",
       "      <td>sitting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>33.33</td>\n",
       "      <td>48.00</td>\n",
       "      <td>44.334729</td>\n",
       "      <td>45.000</td>\n",
       "      <td>2.476940</td>\n",
       "      <td>42.2500</td>\n",
       "      <td>46.5000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.90</td>\n",
       "      <td>0.432958</td>\n",
       "      <td>...</td>\n",
       "      <td>9.3300</td>\n",
       "      <td>17.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.02</td>\n",
       "      <td>0.933000</td>\n",
       "      <td>0.830</td>\n",
       "      <td>0.673609</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.2500</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>35.50</td>\n",
       "      <td>46.25</td>\n",
       "      <td>43.174938</td>\n",
       "      <td>43.670</td>\n",
       "      <td>1.989052</td>\n",
       "      <td>42.5000</td>\n",
       "      <td>44.5000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.12</td>\n",
       "      <td>0.506583</td>\n",
       "      <td>...</td>\n",
       "      <td>12.7500</td>\n",
       "      <td>16.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.72</td>\n",
       "      <td>0.911979</td>\n",
       "      <td>0.830</td>\n",
       "      <td>0.666161</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.2200</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>32.75</td>\n",
       "      <td>47.00</td>\n",
       "      <td>42.760562</td>\n",
       "      <td>44.500</td>\n",
       "      <td>3.398919</td>\n",
       "      <td>41.3300</td>\n",
       "      <td>45.3725</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.34</td>\n",
       "      <td>0.486167</td>\n",
       "      <td>...</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>18.5650</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.73</td>\n",
       "      <td>0.842271</td>\n",
       "      <td>0.710</td>\n",
       "      <td>0.722165</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>1.0900</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>19.33</td>\n",
       "      <td>43.50</td>\n",
       "      <td>34.227771</td>\n",
       "      <td>35.500</td>\n",
       "      <td>4.889576</td>\n",
       "      <td>30.5000</td>\n",
       "      <td>37.7500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14.50</td>\n",
       "      <td>3.995729</td>\n",
       "      <td>...</td>\n",
       "      <td>14.7500</td>\n",
       "      <td>18.6700</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.74</td>\n",
       "      <td>3.394125</td>\n",
       "      <td>3.100</td>\n",
       "      <td>1.792090</td>\n",
       "      <td>2.1050</td>\n",
       "      <td>4.4250</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>12.50</td>\n",
       "      <td>45.00</td>\n",
       "      <td>33.509729</td>\n",
       "      <td>34.125</td>\n",
       "      <td>4.850923</td>\n",
       "      <td>30.5000</td>\n",
       "      <td>36.7500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.05</td>\n",
       "      <td>4.450771</td>\n",
       "      <td>...</td>\n",
       "      <td>14.6275</td>\n",
       "      <td>18.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.96</td>\n",
       "      <td>3.378479</td>\n",
       "      <td>3.085</td>\n",
       "      <td>1.787360</td>\n",
       "      <td>2.0600</td>\n",
       "      <td>4.4400</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>15.00</td>\n",
       "      <td>46.75</td>\n",
       "      <td>34.660583</td>\n",
       "      <td>35.000</td>\n",
       "      <td>5.315110</td>\n",
       "      <td>31.0000</td>\n",
       "      <td>38.2500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.44</td>\n",
       "      <td>4.200896</td>\n",
       "      <td>...</td>\n",
       "      <td>14.2500</td>\n",
       "      <td>18.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.99</td>\n",
       "      <td>3.244396</td>\n",
       "      <td>3.000</td>\n",
       "      <td>1.630983</td>\n",
       "      <td>2.1200</td>\n",
       "      <td>4.2400</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>35.00</td>\n",
       "      <td>47.40</td>\n",
       "      <td>43.954500</td>\n",
       "      <td>44.330</td>\n",
       "      <td>1.558835</td>\n",
       "      <td>43.0000</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.70</td>\n",
       "      <td>0.426250</td>\n",
       "      <td>...</td>\n",
       "      <td>35.3625</td>\n",
       "      <td>36.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.79</td>\n",
       "      <td>0.493292</td>\n",
       "      <td>0.430</td>\n",
       "      <td>0.513506</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.9400</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>33.00</td>\n",
       "      <td>47.75</td>\n",
       "      <td>42.179812</td>\n",
       "      <td>43.500</td>\n",
       "      <td>3.670666</td>\n",
       "      <td>39.1500</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.00</td>\n",
       "      <td>0.696042</td>\n",
       "      <td>...</td>\n",
       "      <td>30.4575</td>\n",
       "      <td>36.3300</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.613521</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.524317</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>33.00</td>\n",
       "      <td>45.75</td>\n",
       "      <td>41.678063</td>\n",
       "      <td>41.750</td>\n",
       "      <td>2.243490</td>\n",
       "      <td>41.3300</td>\n",
       "      <td>42.7500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.83</td>\n",
       "      <td>0.535979</td>\n",
       "      <td>...</td>\n",
       "      <td>28.4575</td>\n",
       "      <td>31.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.79</td>\n",
       "      <td>0.383292</td>\n",
       "      <td>0.430</td>\n",
       "      <td>0.389164</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.5000</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>37.00</td>\n",
       "      <td>48.00</td>\n",
       "      <td>43.454958</td>\n",
       "      <td>43.250</td>\n",
       "      <td>1.386098</td>\n",
       "      <td>42.5000</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.58</td>\n",
       "      <td>0.378083</td>\n",
       "      <td>...</td>\n",
       "      <td>22.2500</td>\n",
       "      <td>24.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.26</td>\n",
       "      <td>0.679646</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.622534</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>0.8700</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>36.25</td>\n",
       "      <td>48.00</td>\n",
       "      <td>43.969125</td>\n",
       "      <td>44.500</td>\n",
       "      <td>1.618364</td>\n",
       "      <td>43.3100</td>\n",
       "      <td>44.6700</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.50</td>\n",
       "      <td>0.413125</td>\n",
       "      <td>...</td>\n",
       "      <td>20.5000</td>\n",
       "      <td>23.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.96</td>\n",
       "      <td>0.555312</td>\n",
       "      <td>0.490</td>\n",
       "      <td>0.487826</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.8300</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>21.00</td>\n",
       "      <td>50.00</td>\n",
       "      <td>32.586208</td>\n",
       "      <td>33.000</td>\n",
       "      <td>6.238143</td>\n",
       "      <td>26.1875</td>\n",
       "      <td>34.5000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.90</td>\n",
       "      <td>0.516125</td>\n",
       "      <td>...</td>\n",
       "      <td>17.6700</td>\n",
       "      <td>23.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>13.61</td>\n",
       "      <td>1.162042</td>\n",
       "      <td>0.830</td>\n",
       "      <td>1.332980</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.3000</td>\n",
       "      <td>bending2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>27.50</td>\n",
       "      <td>33.00</td>\n",
       "      <td>29.881938</td>\n",
       "      <td>30.000</td>\n",
       "      <td>1.153837</td>\n",
       "      <td>29.0000</td>\n",
       "      <td>30.2700</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.256437</td>\n",
       "      <td>...</td>\n",
       "      <td>17.0000</td>\n",
       "      <td>19.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.40</td>\n",
       "      <td>0.701625</td>\n",
       "      <td>0.710</td>\n",
       "      <td>0.481103</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>0.9400</td>\n",
       "      <td>bending2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>19.00</td>\n",
       "      <td>45.50</td>\n",
       "      <td>30.938104</td>\n",
       "      <td>29.000</td>\n",
       "      <td>7.684146</td>\n",
       "      <td>26.7500</td>\n",
       "      <td>38.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.40</td>\n",
       "      <td>0.467167</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0000</td>\n",
       "      <td>20.8125</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.73</td>\n",
       "      <td>1.107354</td>\n",
       "      <td>0.830</td>\n",
       "      <td>1.080842</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.3000</td>\n",
       "      <td>bending2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>25.00</td>\n",
       "      <td>47.50</td>\n",
       "      <td>31.058250</td>\n",
       "      <td>29.710</td>\n",
       "      <td>4.829794</td>\n",
       "      <td>27.5000</td>\n",
       "      <td>31.8125</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.38</td>\n",
       "      <td>0.405458</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0000</td>\n",
       "      <td>18.3125</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.92</td>\n",
       "      <td>1.098104</td>\n",
       "      <td>0.940</td>\n",
       "      <td>0.831480</td>\n",
       "      <td>0.5000</td>\n",
       "      <td>1.3000</td>\n",
       "      <td>bending2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>19.00</td>\n",
       "      <td>44.00</td>\n",
       "      <td>36.228396</td>\n",
       "      <td>36.000</td>\n",
       "      <td>3.528617</td>\n",
       "      <td>34.0000</td>\n",
       "      <td>39.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.28</td>\n",
       "      <td>2.831687</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0000</td>\n",
       "      <td>18.0625</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.98</td>\n",
       "      <td>3.480688</td>\n",
       "      <td>3.340</td>\n",
       "      <td>1.827769</td>\n",
       "      <td>2.1025</td>\n",
       "      <td>4.5500</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>26.50</td>\n",
       "      <td>44.33</td>\n",
       "      <td>36.687292</td>\n",
       "      <td>36.000</td>\n",
       "      <td>3.529404</td>\n",
       "      <td>34.2500</td>\n",
       "      <td>39.3725</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.89</td>\n",
       "      <td>2.973042</td>\n",
       "      <td>...</td>\n",
       "      <td>14.6700</td>\n",
       "      <td>18.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.19</td>\n",
       "      <td>3.073313</td>\n",
       "      <td>2.690</td>\n",
       "      <td>1.629675</td>\n",
       "      <td>1.9125</td>\n",
       "      <td>4.0875</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>35.25</td>\n",
       "      <td>48.50</td>\n",
       "      <td>40.219271</td>\n",
       "      <td>39.250</td>\n",
       "      <td>2.741217</td>\n",
       "      <td>37.7500</td>\n",
       "      <td>42.5000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.28</td>\n",
       "      <td>0.617479</td>\n",
       "      <td>...</td>\n",
       "      <td>11.6700</td>\n",
       "      <td>19.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.36</td>\n",
       "      <td>1.057729</td>\n",
       "      <td>0.830</td>\n",
       "      <td>1.025925</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.3000</td>\n",
       "      <td>sitting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>28.50</td>\n",
       "      <td>48.25</td>\n",
       "      <td>43.884833</td>\n",
       "      <td>45.250</td>\n",
       "      <td>3.198894</td>\n",
       "      <td>42.0000</td>\n",
       "      <td>46.5000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.28</td>\n",
       "      <td>0.517354</td>\n",
       "      <td>...</td>\n",
       "      <td>10.5000</td>\n",
       "      <td>19.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>1.354917</td>\n",
       "      <td>1.090</td>\n",
       "      <td>1.150883</td>\n",
       "      <td>0.5000</td>\n",
       "      <td>1.7000</td>\n",
       "      <td>sitting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>39.50</td>\n",
       "      <td>45.00</td>\n",
       "      <td>42.111583</td>\n",
       "      <td>42.000</td>\n",
       "      <td>1.122245</td>\n",
       "      <td>41.5000</td>\n",
       "      <td>42.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.09</td>\n",
       "      <td>0.341938</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0000</td>\n",
       "      <td>17.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.36</td>\n",
       "      <td>0.961167</td>\n",
       "      <td>0.820</td>\n",
       "      <td>0.882784</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.2200</td>\n",
       "      <td>sitting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>39.67</td>\n",
       "      <td>44.75</td>\n",
       "      <td>42.282667</td>\n",
       "      <td>41.500</td>\n",
       "      <td>1.356149</td>\n",
       "      <td>41.5000</td>\n",
       "      <td>44.3300</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.498354</td>\n",
       "      <td>...</td>\n",
       "      <td>8.5000</td>\n",
       "      <td>18.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.85</td>\n",
       "      <td>0.869000</td>\n",
       "      <td>0.820</td>\n",
       "      <td>0.794213</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>sitting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>40.00</td>\n",
       "      <td>44.67</td>\n",
       "      <td>42.360188</td>\n",
       "      <td>42.000</td>\n",
       "      <td>1.017372</td>\n",
       "      <td>41.5000</td>\n",
       "      <td>43.2500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.482500</td>\n",
       "      <td>...</td>\n",
       "      <td>9.7500</td>\n",
       "      <td>22.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.64</td>\n",
       "      <td>0.719812</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.608546</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>0.8300</td>\n",
       "      <td>sitting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>29.25</td>\n",
       "      <td>46.00</td>\n",
       "      <td>42.728854</td>\n",
       "      <td>43.250</td>\n",
       "      <td>2.046362</td>\n",
       "      <td>41.3300</td>\n",
       "      <td>44.5000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.72</td>\n",
       "      <td>0.555333</td>\n",
       "      <td>...</td>\n",
       "      <td>13.7300</td>\n",
       "      <td>19.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.10</td>\n",
       "      <td>0.892083</td>\n",
       "      <td>0.710</td>\n",
       "      <td>0.851175</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>1.2200</td>\n",
       "      <td>sitting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>30.00</td>\n",
       "      <td>46.67</td>\n",
       "      <td>42.648521</td>\n",
       "      <td>42.750</td>\n",
       "      <td>2.395338</td>\n",
       "      <td>41.5000</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.95</td>\n",
       "      <td>0.402833</td>\n",
       "      <td>...</td>\n",
       "      <td>10.6275</td>\n",
       "      <td>14.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.64</td>\n",
       "      <td>0.917354</td>\n",
       "      <td>0.830</td>\n",
       "      <td>0.709638</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.1200</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>36.00</td>\n",
       "      <td>47.50</td>\n",
       "      <td>43.720021</td>\n",
       "      <td>45.000</td>\n",
       "      <td>2.384105</td>\n",
       "      <td>43.0000</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.92</td>\n",
       "      <td>0.366708</td>\n",
       "      <td>...</td>\n",
       "      <td>11.3100</td>\n",
       "      <td>15.5425</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.18</td>\n",
       "      <td>1.039687</td>\n",
       "      <td>0.830</td>\n",
       "      <td>0.916657</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.2200</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>34.50</td>\n",
       "      <td>47.75</td>\n",
       "      <td>44.471146</td>\n",
       "      <td>45.000</td>\n",
       "      <td>1.772553</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>45.2500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.290479</td>\n",
       "      <td>...</td>\n",
       "      <td>12.0000</td>\n",
       "      <td>14.8125</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.32</td>\n",
       "      <td>0.927375</td>\n",
       "      <td>0.830</td>\n",
       "      <td>0.756436</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.2200</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>35.50</td>\n",
       "      <td>48.00</td>\n",
       "      <td>46.224938</td>\n",
       "      <td>46.000</td>\n",
       "      <td>1.748315</td>\n",
       "      <td>45.2500</td>\n",
       "      <td>48.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.50</td>\n",
       "      <td>0.312354</td>\n",
       "      <td>...</td>\n",
       "      <td>12.0000</td>\n",
       "      <td>15.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.00</td>\n",
       "      <td>0.882583</td>\n",
       "      <td>0.830</td>\n",
       "      <td>0.668423</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.1200</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>29.75</td>\n",
       "      <td>48.00</td>\n",
       "      <td>46.932208</td>\n",
       "      <td>47.500</td>\n",
       "      <td>1.832665</td>\n",
       "      <td>47.2375</td>\n",
       "      <td>47.7500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.60</td>\n",
       "      <td>0.429667</td>\n",
       "      <td>...</td>\n",
       "      <td>11.6700</td>\n",
       "      <td>15.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.58</td>\n",
       "      <td>0.991125</td>\n",
       "      <td>0.830</td>\n",
       "      <td>0.855329</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.2200</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>36.33</td>\n",
       "      <td>47.67</td>\n",
       "      <td>45.399625</td>\n",
       "      <td>45.500</td>\n",
       "      <td>1.328121</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>46.3300</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.66</td>\n",
       "      <td>0.460146</td>\n",
       "      <td>...</td>\n",
       "      <td>11.2500</td>\n",
       "      <td>14.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.50</td>\n",
       "      <td>0.795104</td>\n",
       "      <td>0.820</td>\n",
       "      <td>0.503007</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>36.00</td>\n",
       "      <td>45.80</td>\n",
       "      <td>42.419917</td>\n",
       "      <td>42.670</td>\n",
       "      <td>2.520129</td>\n",
       "      <td>41.3300</td>\n",
       "      <td>44.6175</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.12</td>\n",
       "      <td>0.460562</td>\n",
       "      <td>...</td>\n",
       "      <td>7.6275</td>\n",
       "      <td>12.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.65</td>\n",
       "      <td>1.226271</td>\n",
       "      <td>1.090</td>\n",
       "      <td>0.891988</td>\n",
       "      <td>0.5000</td>\n",
       "      <td>1.5850</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>37.00</td>\n",
       "      <td>48.25</td>\n",
       "      <td>42.516958</td>\n",
       "      <td>42.500</td>\n",
       "      <td>2.195751</td>\n",
       "      <td>41.0000</td>\n",
       "      <td>44.5000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.12</td>\n",
       "      <td>0.440687</td>\n",
       "      <td>...</td>\n",
       "      <td>12.6275</td>\n",
       "      <td>17.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.85</td>\n",
       "      <td>0.977417</td>\n",
       "      <td>0.830</td>\n",
       "      <td>0.853280</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.2200</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72</th>\n",
       "      <td>36.25</td>\n",
       "      <td>45.50</td>\n",
       "      <td>42.959354</td>\n",
       "      <td>42.670</td>\n",
       "      <td>1.500878</td>\n",
       "      <td>42.0000</td>\n",
       "      <td>44.3300</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.60</td>\n",
       "      <td>0.352875</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0000</td>\n",
       "      <td>16.6900</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.748479</td>\n",
       "      <td>0.820</td>\n",
       "      <td>0.461152</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>0.9500</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73</th>\n",
       "      <td>36.00</td>\n",
       "      <td>47.33</td>\n",
       "      <td>42.674583</td>\n",
       "      <td>43.670</td>\n",
       "      <td>2.384170</td>\n",
       "      <td>40.0000</td>\n",
       "      <td>44.7500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.17</td>\n",
       "      <td>0.419167</td>\n",
       "      <td>...</td>\n",
       "      <td>12.7500</td>\n",
       "      <td>16.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.77</td>\n",
       "      <td>0.702042</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.567451</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>0.9400</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>36.25</td>\n",
       "      <td>45.75</td>\n",
       "      <td>43.187521</td>\n",
       "      <td>44.750</td>\n",
       "      <td>2.491162</td>\n",
       "      <td>39.7500</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.83</td>\n",
       "      <td>0.271271</td>\n",
       "      <td>...</td>\n",
       "      <td>16.5000</td>\n",
       "      <td>21.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.83</td>\n",
       "      <td>0.645458</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.567419</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>0.8300</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>36.00</td>\n",
       "      <td>47.33</td>\n",
       "      <td>44.441187</td>\n",
       "      <td>45.000</td>\n",
       "      <td>2.417797</td>\n",
       "      <td>44.6275</td>\n",
       "      <td>45.7500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.50</td>\n",
       "      <td>0.346604</td>\n",
       "      <td>...</td>\n",
       "      <td>11.0000</td>\n",
       "      <td>14.6700</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.91</td>\n",
       "      <td>1.155083</td>\n",
       "      <td>0.940</td>\n",
       "      <td>0.842087</td>\n",
       "      <td>0.5000</td>\n",
       "      <td>1.5000</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>18.00</td>\n",
       "      <td>46.00</td>\n",
       "      <td>35.193333</td>\n",
       "      <td>36.000</td>\n",
       "      <td>4.751868</td>\n",
       "      <td>32.0000</td>\n",
       "      <td>38.7500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.20</td>\n",
       "      <td>4.321021</td>\n",
       "      <td>...</td>\n",
       "      <td>14.2500</td>\n",
       "      <td>18.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.50</td>\n",
       "      <td>3.241958</td>\n",
       "      <td>3.015</td>\n",
       "      <td>1.769182</td>\n",
       "      <td>1.8850</td>\n",
       "      <td>4.4400</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>20.75</td>\n",
       "      <td>46.25</td>\n",
       "      <td>34.763333</td>\n",
       "      <td>35.290</td>\n",
       "      <td>4.742208</td>\n",
       "      <td>31.6700</td>\n",
       "      <td>38.2500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.68</td>\n",
       "      <td>4.223792</td>\n",
       "      <td>...</td>\n",
       "      <td>14.2500</td>\n",
       "      <td>18.3300</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.39</td>\n",
       "      <td>3.288271</td>\n",
       "      <td>3.270</td>\n",
       "      <td>1.647528</td>\n",
       "      <td>2.0500</td>\n",
       "      <td>4.3050</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>21.50</td>\n",
       "      <td>51.00</td>\n",
       "      <td>34.935812</td>\n",
       "      <td>35.500</td>\n",
       "      <td>4.645944</td>\n",
       "      <td>32.0000</td>\n",
       "      <td>38.0625</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.21</td>\n",
       "      <td>4.115750</td>\n",
       "      <td>...</td>\n",
       "      <td>14.2375</td>\n",
       "      <td>18.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10.21</td>\n",
       "      <td>3.280021</td>\n",
       "      <td>3.015</td>\n",
       "      <td>1.700918</td>\n",
       "      <td>2.1200</td>\n",
       "      <td>4.5000</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>18.33</td>\n",
       "      <td>47.67</td>\n",
       "      <td>34.333042</td>\n",
       "      <td>34.750</td>\n",
       "      <td>4.948770</td>\n",
       "      <td>31.2500</td>\n",
       "      <td>38.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.48</td>\n",
       "      <td>4.396958</td>\n",
       "      <td>...</td>\n",
       "      <td>13.7500</td>\n",
       "      <td>18.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.01</td>\n",
       "      <td>3.261583</td>\n",
       "      <td>2.980</td>\n",
       "      <td>1.617290</td>\n",
       "      <td>2.0500</td>\n",
       "      <td>4.3200</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>18.33</td>\n",
       "      <td>45.75</td>\n",
       "      <td>34.599875</td>\n",
       "      <td>35.125</td>\n",
       "      <td>4.731790</td>\n",
       "      <td>31.5000</td>\n",
       "      <td>38.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.37</td>\n",
       "      <td>4.398833</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0000</td>\n",
       "      <td>18.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.86</td>\n",
       "      <td>3.289542</td>\n",
       "      <td>3.015</td>\n",
       "      <td>1.680170</td>\n",
       "      <td>2.1200</td>\n",
       "      <td>4.2600</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>15.50</td>\n",
       "      <td>43.67</td>\n",
       "      <td>34.225875</td>\n",
       "      <td>34.750</td>\n",
       "      <td>4.441798</td>\n",
       "      <td>31.2500</td>\n",
       "      <td>37.2500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17.24</td>\n",
       "      <td>4.354500</td>\n",
       "      <td>...</td>\n",
       "      <td>14.3300</td>\n",
       "      <td>18.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.42</td>\n",
       "      <td>3.479542</td>\n",
       "      <td>3.270</td>\n",
       "      <td>1.761146</td>\n",
       "      <td>2.2400</td>\n",
       "      <td>4.5375</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>21.50</td>\n",
       "      <td>51.25</td>\n",
       "      <td>34.253521</td>\n",
       "      <td>35.000</td>\n",
       "      <td>4.940741</td>\n",
       "      <td>30.9375</td>\n",
       "      <td>37.7500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.55</td>\n",
       "      <td>4.457896</td>\n",
       "      <td>...</td>\n",
       "      <td>13.7500</td>\n",
       "      <td>18.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.32</td>\n",
       "      <td>3.500750</td>\n",
       "      <td>3.285</td>\n",
       "      <td>1.692378</td>\n",
       "      <td>2.1800</td>\n",
       "      <td>4.5575</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>19.50</td>\n",
       "      <td>45.33</td>\n",
       "      <td>33.586875</td>\n",
       "      <td>34.250</td>\n",
       "      <td>4.650935</td>\n",
       "      <td>30.2500</td>\n",
       "      <td>37.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14.67</td>\n",
       "      <td>4.576562</td>\n",
       "      <td>...</td>\n",
       "      <td>13.7300</td>\n",
       "      <td>18.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.32</td>\n",
       "      <td>3.259729</td>\n",
       "      <td>3.110</td>\n",
       "      <td>1.640243</td>\n",
       "      <td>2.0500</td>\n",
       "      <td>4.3225</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>19.75</td>\n",
       "      <td>45.50</td>\n",
       "      <td>34.322750</td>\n",
       "      <td>35.250</td>\n",
       "      <td>4.752477</td>\n",
       "      <td>31.0000</td>\n",
       "      <td>38.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.47</td>\n",
       "      <td>4.456333</td>\n",
       "      <td>...</td>\n",
       "      <td>13.5000</td>\n",
       "      <td>17.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.67</td>\n",
       "      <td>3.432563</td>\n",
       "      <td>3.200</td>\n",
       "      <td>1.732727</td>\n",
       "      <td>2.1575</td>\n",
       "      <td>4.5650</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>19.50</td>\n",
       "      <td>46.00</td>\n",
       "      <td>34.546229</td>\n",
       "      <td>35.250</td>\n",
       "      <td>4.842294</td>\n",
       "      <td>31.2500</td>\n",
       "      <td>37.8125</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.47</td>\n",
       "      <td>4.371958</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0000</td>\n",
       "      <td>17.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>3.338125</td>\n",
       "      <td>3.080</td>\n",
       "      <td>1.656742</td>\n",
       "      <td>2.1600</td>\n",
       "      <td>4.3350</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>23.50</td>\n",
       "      <td>46.25</td>\n",
       "      <td>34.873229</td>\n",
       "      <td>35.250</td>\n",
       "      <td>4.531720</td>\n",
       "      <td>31.7500</td>\n",
       "      <td>38.2500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14.82</td>\n",
       "      <td>4.380583</td>\n",
       "      <td>...</td>\n",
       "      <td>13.7500</td>\n",
       "      <td>18.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.51</td>\n",
       "      <td>3.424646</td>\n",
       "      <td>3.270</td>\n",
       "      <td>1.690960</td>\n",
       "      <td>2.1700</td>\n",
       "      <td>4.5000</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>19.25</td>\n",
       "      <td>44.00</td>\n",
       "      <td>34.473188</td>\n",
       "      <td>35.000</td>\n",
       "      <td>4.796705</td>\n",
       "      <td>31.2500</td>\n",
       "      <td>38.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.86</td>\n",
       "      <td>4.359312</td>\n",
       "      <td>...</td>\n",
       "      <td>13.7300</td>\n",
       "      <td>17.7500</td>\n",
       "      <td>0.43</td>\n",
       "      <td>9.00</td>\n",
       "      <td>3.340458</td>\n",
       "      <td>3.090</td>\n",
       "      <td>1.699114</td>\n",
       "      <td>2.1200</td>\n",
       "      <td>4.3750</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>88 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     min1   max1      mean1  median1      std1  1st_quart1  3rd_quart1  min2  \\\n",
       "0   37.25  45.00  40.624792   40.500  1.476967     39.2500     42.0000   0.0   \n",
       "1   38.00  45.67  42.812812   42.500  1.435550     42.0000     43.6700   0.0   \n",
       "2   12.75  51.00  24.562958   24.250  3.737514     23.1875     26.5000   0.0   \n",
       "3    0.00  42.75  27.464604   28.000  3.583582     25.5000     30.0000   0.0   \n",
       "4   24.25  45.00  37.177042   36.250  3.581301     34.5000     40.2500   0.0   \n",
       "5   28.75  44.75  37.561187   36.875  3.226507     35.2500     40.2500   0.0   \n",
       "6   22.00  44.67  37.058708   36.000  3.710180     34.5000     40.0625   0.0   \n",
       "7   23.50  30.00  27.716375   27.500  1.442253     27.0000     29.0000   0.0   \n",
       "8   24.75  48.33  44.182937   48.000  7.495615     48.0000     48.0000   0.0   \n",
       "9   48.00  48.25  48.004167   48.000  0.032038     48.0000     48.0000   0.0   \n",
       "10  33.25  48.00  42.363563   43.000  2.068247     42.0000     43.5000   0.0   \n",
       "11  37.00  50.75  45.917667   45.635  1.089027     45.0000     46.5000   0.0   \n",
       "12  44.50  46.75  45.239667   45.000  0.429915     45.0000     45.3300   0.0   \n",
       "13  33.33  48.00  44.334729   45.000  2.476940     42.2500     46.5000   0.0   \n",
       "14  35.50  46.25  43.174938   43.670  1.989052     42.5000     44.5000   0.0   \n",
       "15  32.75  47.00  42.760562   44.500  3.398919     41.3300     45.3725   0.0   \n",
       "16  19.33  43.50  34.227771   35.500  4.889576     30.5000     37.7500   0.0   \n",
       "17  12.50  45.00  33.509729   34.125  4.850923     30.5000     36.7500   0.0   \n",
       "18  15.00  46.75  34.660583   35.000  5.315110     31.0000     38.2500   0.0   \n",
       "19  35.00  47.40  43.954500   44.330  1.558835     43.0000     45.0000   0.0   \n",
       "20  33.00  47.75  42.179812   43.500  3.670666     39.1500     45.0000   0.0   \n",
       "21  33.00  45.75  41.678063   41.750  2.243490     41.3300     42.7500   0.0   \n",
       "22  37.00  48.00  43.454958   43.250  1.386098     42.5000     45.0000   0.0   \n",
       "23  36.25  48.00  43.969125   44.500  1.618364     43.3100     44.6700   0.0   \n",
       "24  21.00  50.00  32.586208   33.000  6.238143     26.1875     34.5000   0.0   \n",
       "25  27.50  33.00  29.881938   30.000  1.153837     29.0000     30.2700   0.0   \n",
       "26  19.00  45.50  30.938104   29.000  7.684146     26.7500     38.0000   0.0   \n",
       "27  25.00  47.50  31.058250   29.710  4.829794     27.5000     31.8125   0.0   \n",
       "28  19.00  44.00  36.228396   36.000  3.528617     34.0000     39.0000   0.0   \n",
       "29  26.50  44.33  36.687292   36.000  3.529404     34.2500     39.3725   0.0   \n",
       "..    ...    ...        ...      ...       ...         ...         ...   ...   \n",
       "58  35.25  48.50  40.219271   39.250  2.741217     37.7500     42.5000   0.0   \n",
       "59  28.50  48.25  43.884833   45.250  3.198894     42.0000     46.5000   0.0   \n",
       "60  39.50  45.00  42.111583   42.000  1.122245     41.5000     42.0000   0.0   \n",
       "61  39.67  44.75  42.282667   41.500  1.356149     41.5000     44.3300   0.0   \n",
       "62  40.00  44.67  42.360188   42.000  1.017372     41.5000     43.2500   0.0   \n",
       "63  29.25  46.00  42.728854   43.250  2.046362     41.3300     44.5000   0.0   \n",
       "64  30.00  46.67  42.648521   42.750  2.395338     41.5000     45.0000   0.0   \n",
       "65  36.00  47.50  43.720021   45.000  2.384105     43.0000     45.0000   0.0   \n",
       "66  34.50  47.75  44.471146   45.000  1.772553     45.0000     45.2500   0.0   \n",
       "67  35.50  48.00  46.224938   46.000  1.748315     45.2500     48.0000   0.0   \n",
       "68  29.75  48.00  46.932208   47.500  1.832665     47.2375     47.7500   0.0   \n",
       "69  36.33  47.67  45.399625   45.500  1.328121     45.0000     46.3300   0.0   \n",
       "70  36.00  45.80  42.419917   42.670  2.520129     41.3300     44.6175   0.0   \n",
       "71  37.00  48.25  42.516958   42.500  2.195751     41.0000     44.5000   0.0   \n",
       "72  36.25  45.50  42.959354   42.670  1.500878     42.0000     44.3300   0.0   \n",
       "73  36.00  47.33  42.674583   43.670  2.384170     40.0000     44.7500   0.0   \n",
       "74  36.25  45.75  43.187521   44.750  2.491162     39.7500     45.0000   0.0   \n",
       "75  36.00  47.33  44.441187   45.000  2.417797     44.6275     45.7500   0.0   \n",
       "76  18.00  46.00  35.193333   36.000  4.751868     32.0000     38.7500   0.0   \n",
       "77  20.75  46.25  34.763333   35.290  4.742208     31.6700     38.2500   0.0   \n",
       "78  21.50  51.00  34.935812   35.500  4.645944     32.0000     38.0625   0.0   \n",
       "79  18.33  47.67  34.333042   34.750  4.948770     31.2500     38.0000   0.0   \n",
       "80  18.33  45.75  34.599875   35.125  4.731790     31.5000     38.0000   0.0   \n",
       "81  15.50  43.67  34.225875   34.750  4.441798     31.2500     37.2500   0.0   \n",
       "82  21.50  51.25  34.253521   35.000  4.940741     30.9375     37.7500   0.0   \n",
       "83  19.50  45.33  33.586875   34.250  4.650935     30.2500     37.0000   0.0   \n",
       "84  19.75  45.50  34.322750   35.250  4.752477     31.0000     38.0000   0.0   \n",
       "85  19.50  46.00  34.546229   35.250  4.842294     31.2500     37.8125   0.0   \n",
       "86  23.50  46.25  34.873229   35.250  4.531720     31.7500     38.2500   0.0   \n",
       "87  19.25  44.00  34.473188   35.000  4.796705     31.2500     38.0000   0.0   \n",
       "\n",
       "     max2     mean2    ...     1st_quart5  3rd_quart5  min6   max6     mean6  \\\n",
       "0    1.30  0.358604    ...        33.0000     36.0000  0.00   1.92  0.570583   \n",
       "1    1.22  0.372437    ...        32.0000     34.5000  0.00   3.11  0.571083   \n",
       "2    6.87  0.590833    ...        20.5000     27.0000  0.00   4.97  0.700188   \n",
       "3    7.76  0.449708    ...        15.0000     20.7500  0.00   6.76  1.122125   \n",
       "4    8.58  2.374208    ...        17.9500     21.7500  0.00   9.34  2.921729   \n",
       "5    9.91  2.080687    ...        18.0000     21.5000  0.00   9.62  2.765896   \n",
       "6   14.17  2.438146    ...        16.0000     21.0000  0.00   8.55  2.983750   \n",
       "7    1.79  0.363687    ...         5.5000     10.7500  0.00   4.50  0.734271   \n",
       "8    3.11  0.101875    ...         2.0000      5.5425  0.00   3.91  0.692771   \n",
       "9    0.43  0.007167    ...         4.6700     10.0000  0.00   2.50  0.641229   \n",
       "10   4.44  0.492563    ...        10.1875     17.6900  0.00   6.02  1.034021   \n",
       "11   4.87  0.324542    ...        16.5000     21.0000  0.00   7.22  0.904604   \n",
       "12   1.00  0.172958    ...        17.6275     21.0000  0.00   8.20  0.837250   \n",
       "13   3.90  0.432958    ...         9.3300     17.7500  0.00   5.02  0.933000   \n",
       "14   2.12  0.506583    ...        12.7500     16.5000  0.00   5.72  0.911979   \n",
       "15   3.34  0.486167    ...        13.0000     18.5650  0.00   5.73  0.842271   \n",
       "16  14.50  3.995729    ...        14.7500     18.6700  0.00   9.74  3.394125   \n",
       "17  13.05  4.450771    ...        14.6275     18.7500  0.00   8.96  3.378479   \n",
       "18  13.44  4.200896    ...        14.2500     18.5000  0.00   8.99  3.244396   \n",
       "19   1.70  0.426250    ...        35.3625     36.5000  0.00   1.79  0.493292   \n",
       "20   3.00  0.696042    ...        30.4575     36.3300  0.00   2.18  0.613521   \n",
       "21   2.83  0.535979    ...        28.4575     31.2500  0.00   1.79  0.383292   \n",
       "22   1.58  0.378083    ...        22.2500     24.0000  0.00   5.26  0.679646   \n",
       "23   1.50  0.413125    ...        20.5000     23.7500  0.00   2.96  0.555312   \n",
       "24   9.90  0.516125    ...        17.6700     23.5000  0.00  13.61  1.162042   \n",
       "25   1.00  0.256437    ...        17.0000     19.0000  0.00   6.40  0.701625   \n",
       "26   6.40  0.467167    ...        15.0000     20.8125  0.00   6.73  1.107354   \n",
       "27   6.38  0.405458    ...         9.0000     18.3125  0.00   4.92  1.098104   \n",
       "28  12.28  2.831687    ...        14.0000     18.0625  0.00   9.98  3.480688   \n",
       "29  12.89  2.973042    ...        14.6700     18.5000  0.00   8.19  3.073313   \n",
       "..    ...       ...    ...            ...         ...   ...    ...       ...   \n",
       "58   3.28  0.617479    ...        11.6700     19.7500  0.00   6.36  1.057729   \n",
       "59   3.28  0.517354    ...        10.5000     19.2500  0.00   7.00  1.354917   \n",
       "60   1.09  0.341938    ...         9.0000     17.2500  0.00   6.36  0.961167   \n",
       "61   1.00  0.498354    ...         8.5000     18.2500  0.00   7.85  0.869000   \n",
       "62   1.00  0.482500    ...         9.7500     22.0000  0.00   4.64  0.719812   \n",
       "63   4.72  0.555333    ...        13.7300     19.0000  0.00   5.10  0.892083   \n",
       "64   2.95  0.402833    ...        10.6275     14.2500  0.00   4.64  0.917354   \n",
       "65   1.92  0.366708    ...        11.3100     15.5425  0.00   6.18  1.039687   \n",
       "66   2.18  0.290479    ...        12.0000     14.8125  0.00   4.32  0.927375   \n",
       "67   4.50  0.312354    ...        12.0000     15.2500  0.00   6.00  0.882583   \n",
       "68   4.60  0.429667    ...        11.6700     15.5000  0.00   6.58  0.991125   \n",
       "69   1.66  0.460146    ...        11.2500     14.5000  0.00   4.50  0.795104   \n",
       "70   2.12  0.460562    ...         7.6275     12.0000  0.00   6.65  1.226271   \n",
       "71   2.12  0.440687    ...        12.6275     17.5000  0.00   6.85  0.977417   \n",
       "72   2.60  0.352875    ...        14.0000     16.6900  0.00   4.00  0.748479   \n",
       "73   2.17  0.419167    ...        12.7500     16.5000  0.00   3.77  0.702042   \n",
       "74   2.83  0.271271    ...        16.5000     21.0000  0.00   3.83  0.645458   \n",
       "75   4.50  0.346604    ...        11.0000     14.6700  0.00   5.91  1.155083   \n",
       "76  16.20  4.321021    ...        14.2500     18.5000  0.00   8.50  3.241958   \n",
       "77  12.68  4.223792    ...        14.2500     18.3300  0.00   9.39  3.288271   \n",
       "78  12.21  4.115750    ...        14.2375     18.2500  0.00  10.21  3.280021   \n",
       "79  12.48  4.396958    ...        13.7500     18.0000  0.00   8.01  3.261583   \n",
       "80  15.37  4.398833    ...        14.0000     18.2500  0.00   8.86  3.289542   \n",
       "81  17.24  4.354500    ...        14.3300     18.2500  0.00   9.42  3.479542   \n",
       "82  13.55  4.457896    ...        13.7500     18.0000  0.00   8.32  3.500750   \n",
       "83  14.67  4.576562    ...        13.7300     18.2500  0.00   8.32  3.259729   \n",
       "84  13.47  4.456333    ...        13.5000     17.7500  0.00   9.67  3.432563   \n",
       "85  12.47  4.371958    ...        14.0000     17.7500  0.00  10.00  3.338125   \n",
       "86  14.82  4.380583    ...        13.7500     18.0000  0.00   9.51  3.424646   \n",
       "87  13.86  4.359312    ...        13.7300     17.7500  0.43   9.00  3.340458   \n",
       "\n",
       "    median6      std6  1st_quart6  3rd_quart6  activity  \n",
       "0     0.430  0.582915      0.0000      1.3000  bending1  \n",
       "1     0.430  0.601010      0.0000      1.3000  bending1  \n",
       "2     0.500  0.693720      0.4300      0.8700  bending2  \n",
       "3     0.830  1.012342      0.4700      1.3000  bending2  \n",
       "4     2.500  1.852600      1.5000      3.9000   cycling  \n",
       "5     2.450  1.769203      1.4100      3.7700   cycling  \n",
       "6     2.570  1.815730      1.5000      4.1500   cycling  \n",
       "7     0.710  0.613688      0.4300      1.0000     lying  \n",
       "8     0.500  0.675781      0.3225      0.9400     lying  \n",
       "9     0.500  0.388372      0.4600      0.8300     lying  \n",
       "10    0.830  0.985627      0.4700      1.2500   sitting  \n",
       "11    0.710  0.896171      0.4300      1.1200   sitting  \n",
       "12    0.710  0.835344      0.4300      1.1200   sitting  \n",
       "13    0.830  0.673609      0.4700      1.2500  standing  \n",
       "14    0.830  0.666161      0.4700      1.2200  standing  \n",
       "15    0.710  0.722165      0.4300      1.0900  standing  \n",
       "16    3.100  1.792090      2.1050      4.4250   walking  \n",
       "17    3.085  1.787360      2.0600      4.4400   walking  \n",
       "18    3.000  1.630983      2.1200      4.2400   walking  \n",
       "19    0.430  0.513506      0.0000      0.9400  bending1  \n",
       "20    0.500  0.524317      0.0000      1.0000  bending1  \n",
       "21    0.430  0.389164      0.0000      0.5000  bending1  \n",
       "22    0.500  0.622534      0.4300      0.8700  bending1  \n",
       "23    0.490  0.487826      0.0000      0.8300  bending1  \n",
       "24    0.830  1.332980      0.4700      1.3000  bending2  \n",
       "25    0.710  0.481103      0.4700      0.9400  bending2  \n",
       "26    0.830  1.080842      0.4700      1.3000  bending2  \n",
       "27    0.940  0.831480      0.5000      1.3000  bending2  \n",
       "28    3.340  1.827769      2.1025      4.5500   cycling  \n",
       "29    2.690  1.629675      1.9125      4.0875   cycling  \n",
       "..      ...       ...         ...         ...       ...  \n",
       "58    0.830  1.025925      0.4700      1.3000   sitting  \n",
       "59    1.090  1.150883      0.5000      1.7000   sitting  \n",
       "60    0.820  0.882784      0.4700      1.2200   sitting  \n",
       "61    0.820  0.794213      0.4700      1.0000   sitting  \n",
       "62    0.500  0.608546      0.4300      0.8300   sitting  \n",
       "63    0.710  0.851175      0.4300      1.2200   sitting  \n",
       "64    0.830  0.709638      0.4700      1.1200  standing  \n",
       "65    0.830  0.916657      0.4700      1.2200  standing  \n",
       "66    0.830  0.756436      0.4700      1.2200  standing  \n",
       "67    0.830  0.668423      0.4700      1.1200  standing  \n",
       "68    0.830  0.855329      0.4700      1.2200  standing  \n",
       "69    0.820  0.503007      0.4700      1.0000  standing  \n",
       "70    1.090  0.891988      0.5000      1.5850  standing  \n",
       "71    0.830  0.853280      0.4700      1.2200  standing  \n",
       "72    0.820  0.461152      0.4300      0.9500  standing  \n",
       "73    0.500  0.567451      0.4300      0.9400  standing  \n",
       "74    0.500  0.567419      0.4300      0.8300  standing  \n",
       "75    0.940  0.842087      0.5000      1.5000  standing  \n",
       "76    3.015  1.769182      1.8850      4.4400   walking  \n",
       "77    3.270  1.647528      2.0500      4.3050   walking  \n",
       "78    3.015  1.700918      2.1200      4.5000   walking  \n",
       "79    2.980  1.617290      2.0500      4.3200   walking  \n",
       "80    3.015  1.680170      2.1200      4.2600   walking  \n",
       "81    3.270  1.761146      2.2400      4.5375   walking  \n",
       "82    3.285  1.692378      2.1800      4.5575   walking  \n",
       "83    3.110  1.640243      2.0500      4.3225   walking  \n",
       "84    3.200  1.732727      2.1575      4.5650   walking  \n",
       "85    3.080  1.656742      2.1600      4.3350   walking  \n",
       "86    3.270  1.690960      2.1700      4.5000   walking  \n",
       "87    3.090  1.699114      2.1200      4.3750   walking  \n",
       "\n",
       "[88 rows x 43 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datasets = test_data2 + train_data2\n",
    "\n",
    "newDataset = []\n",
    "for ds in datasets:\n",
    "    df = ds[0]\n",
    "    stats = df.describe()\n",
    "    stats = stats.loc[['min','max','mean','50%','std','25%','75%']]\n",
    "    row = pd.Series()\n",
    "    for i in range(1, 7):\n",
    "        row['min'+str(i)] = stats.iloc[0,i]\n",
    "        row['max'+str(i)] = stats.iloc[1,i]\n",
    "        row['mean'+str(i)] = stats.iloc[2,i]\n",
    "        row['median'+str(i)] = stats.iloc[3,i]\n",
    "        row['std'+str(i)] = stats.iloc[4,i]\n",
    "        row['1st_quart'+str(i)] = stats.iloc[5,i]\n",
    "        row['3rd_quart'+str(i)] = stats.iloc[6,i]\n",
    "    row['activity'] = ds[1]\n",
    "    newDataset.append(row)\n",
    "    \n",
    "newData = pd.DataFrame(newDataset)\n",
    "newData"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "iii. Estimate the standard deviation of each of the time-domain features you extracted from the data. Then, use Python’s bootstrapped or any other method to build a 90% bootsrap confidence interval for the standard deviation of each feature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "min1:\n",
      "9.51544506693    (8.30286417483, 10.824720797)\n",
      "max1:\n",
      "4.36932238296    (3.46692613258, 5.39648075987)\n",
      "mean1:\n",
      "5.30531446124    (4.75993470559, 5.9268520532)\n",
      "median1:\n",
      "5.40905642536    (4.85017415885, 6.0444824062)\n",
      "std1:\n",
      "1.76205557515    (1.58521086212, 1.96037336101)\n",
      "1st_quart1:\n",
      "6.11852624945    (5.62742484448, 6.69789129805)\n",
      "3rd_quart1:\n",
      "5.10964275337    (4.40143507527, 5.91289273962)\n",
      "min2:\n",
      "0.0    (0.0, 0.0)\n",
      "max2:\n",
      "5.03388167916    (4.69355720248, 5.46369120386)\n",
      "mean2:\n",
      "1.56519425207    (1.43213403269, 1.74557193256)\n",
      "median2:\n",
      "1.40419712417    (1.27064663526, 1.58058461908)\n",
      "std2:\n",
      "0.879067799127    (0.821818628233, 0.961921510875)\n",
      "1st_quart2:\n",
      "0.94099363332    (0.851615565011, 1.05453907651)\n",
      "3rd_quart2:\n",
      "2.11315652774    (1.94410681267, 2.3426016996)\n",
      "min3:\n",
      "2.93961598442    (2.78628279531, 3.13797792802)\n",
      "max3:\n",
      "4.84735791117    (4.26556652731, 5.53775149064)\n",
      "mean3:\n",
      "3.98554017303    (3.51211729581, 4.56555796803)\n",
      "median3:\n",
      "4.01339672234    (3.50992572246, 4.62479142965)\n",
      "std3:\n",
      "0.941315857697    (0.764822476609, 1.12529556492)\n",
      "1st_quart3:\n",
      "4.19660835607    (3.71980556401, 4.78731920006)\n",
      "3rd_quart3:\n",
      "4.14785806914    (3.63944843131, 4.7848898937)\n",
      "min4:\n",
      "0.0    (0.0, 0.0)\n",
      "max4:\n",
      "2.17118307323    (1.9949103192, 2.37546113076)\n",
      "mean4:\n",
      "1.1594695121    (1.10276044843, 1.24938397979)\n",
      "median4:\n",
      "1.13905805423    (1.08253561556, 1.22977889043)\n",
      "std4:\n",
      "0.455630612419    (0.427974522251, 0.493282960177)\n",
      "1st_quart4:\n",
      "0.838812695108    (0.791302759538, 0.907572889813)\n",
      "3rd_quart4:\n",
      "1.54365792859    (1.47008698757, 1.66544576008)\n",
      "min5:\n",
      "6.08910655146    (4.71902016768, 7.77567288596)\n",
      "max5:\n",
      "5.70852442611    (4.88345137356, 6.6709776901)\n",
      "mean5:\n",
      "5.64325337865    (4.56959279757, 6.89461690094)\n",
      "median5:\n",
      "5.78065520142    (4.6988613525, 7.05752124906)\n",
      "std5:\n",
      "1.01905798371    (0.825154890379, 1.22706156742)\n",
      "1st_quart5:\n",
      "6.06172722534    (4.94836268158, 7.39063231447)\n",
      "3rd_quart5:\n",
      "5.50020018939    (4.48439338445, 6.67479871737)\n",
      "min6:\n",
      "0.0455769658276    (0.013124961749, 0.0911539316552)\n",
      "max6:\n",
      "2.50456803477    (2.26661833166, 2.77156619711)\n",
      "mean6:\n",
      "1.14823174547    (1.08777720455, 1.24050366298)\n",
      "median6:\n",
      "1.08028353806    (1.01901195666, 1.17157727259)\n",
      "std6:\n",
      "0.514668063262    (0.48699646891, 0.552694672955)\n",
      "1st_quart6:\n",
      "0.754261365241    (0.704444568848, 0.823201592662)\n",
      "3rd_quart6:\n",
      "1.514917579    (1.43804594142, 1.63768574149)\n"
     ]
    }
   ],
   "source": [
    "for i in range(42):\n",
    "    std_result = bs.bootstrap(newData.iloc[:,i].values, stat_func=bs_stats.std, alpha=0.1)\n",
    "    print(str(newData.columns[i])+\":\")\n",
    "    print(std_result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "iv. Use your judgement to select the three most important time-domain features (one option may be min, mean, and max)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Min, mean, max seems to be the most important time-domain features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(d) Binary Classification Using Logistic Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "i. Assume that you want to use the training set to classify bending from other activities, i.e. you have a binary classification problem. Depict scatter plots of the features you specified in 1(c)iv extracted from time series 1, 2, and 6 of each instance, and use color to distinguish bending vs. other activities. (See p. 129 of the textbook)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>min1</th>\n",
       "      <th>max1</th>\n",
       "      <th>mean1</th>\n",
       "      <th>median1</th>\n",
       "      <th>std1</th>\n",
       "      <th>1st_quart1</th>\n",
       "      <th>3rd_quart1</th>\n",
       "      <th>min2</th>\n",
       "      <th>max2</th>\n",
       "      <th>mean2</th>\n",
       "      <th>...</th>\n",
       "      <th>1st_quart5</th>\n",
       "      <th>3rd_quart5</th>\n",
       "      <th>min6</th>\n",
       "      <th>max6</th>\n",
       "      <th>mean6</th>\n",
       "      <th>median6</th>\n",
       "      <th>std6</th>\n",
       "      <th>1st_quart6</th>\n",
       "      <th>3rd_quart6</th>\n",
       "      <th>activity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>35.00</td>\n",
       "      <td>47.40</td>\n",
       "      <td>43.954500</td>\n",
       "      <td>44.330</td>\n",
       "      <td>1.558835</td>\n",
       "      <td>43.0000</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.70</td>\n",
       "      <td>0.426250</td>\n",
       "      <td>...</td>\n",
       "      <td>35.3625</td>\n",
       "      <td>36.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.79</td>\n",
       "      <td>0.493292</td>\n",
       "      <td>0.430</td>\n",
       "      <td>0.513506</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.9400</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>33.00</td>\n",
       "      <td>47.75</td>\n",
       "      <td>42.179812</td>\n",
       "      <td>43.500</td>\n",
       "      <td>3.670666</td>\n",
       "      <td>39.1500</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.00</td>\n",
       "      <td>0.696042</td>\n",
       "      <td>...</td>\n",
       "      <td>30.4575</td>\n",
       "      <td>36.3300</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.613521</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.524317</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>33.00</td>\n",
       "      <td>45.75</td>\n",
       "      <td>41.678063</td>\n",
       "      <td>41.750</td>\n",
       "      <td>2.243490</td>\n",
       "      <td>41.3300</td>\n",
       "      <td>42.7500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.83</td>\n",
       "      <td>0.535979</td>\n",
       "      <td>...</td>\n",
       "      <td>28.4575</td>\n",
       "      <td>31.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.79</td>\n",
       "      <td>0.383292</td>\n",
       "      <td>0.430</td>\n",
       "      <td>0.389164</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.5000</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>37.00</td>\n",
       "      <td>48.00</td>\n",
       "      <td>43.454958</td>\n",
       "      <td>43.250</td>\n",
       "      <td>1.386098</td>\n",
       "      <td>42.5000</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.58</td>\n",
       "      <td>0.378083</td>\n",
       "      <td>...</td>\n",
       "      <td>22.2500</td>\n",
       "      <td>24.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.26</td>\n",
       "      <td>0.679646</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.622534</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>0.8700</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>36.25</td>\n",
       "      <td>48.00</td>\n",
       "      <td>43.969125</td>\n",
       "      <td>44.500</td>\n",
       "      <td>1.618364</td>\n",
       "      <td>43.3100</td>\n",
       "      <td>44.6700</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.50</td>\n",
       "      <td>0.413125</td>\n",
       "      <td>...</td>\n",
       "      <td>20.5000</td>\n",
       "      <td>23.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.96</td>\n",
       "      <td>0.555312</td>\n",
       "      <td>0.490</td>\n",
       "      <td>0.487826</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.8300</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>21.00</td>\n",
       "      <td>50.00</td>\n",
       "      <td>32.586208</td>\n",
       "      <td>33.000</td>\n",
       "      <td>6.238143</td>\n",
       "      <td>26.1875</td>\n",
       "      <td>34.5000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.90</td>\n",
       "      <td>0.516125</td>\n",
       "      <td>...</td>\n",
       "      <td>17.6700</td>\n",
       "      <td>23.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>13.61</td>\n",
       "      <td>1.162042</td>\n",
       "      <td>0.830</td>\n",
       "      <td>1.332980</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.3000</td>\n",
       "      <td>bending2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>27.50</td>\n",
       "      <td>33.00</td>\n",
       "      <td>29.881938</td>\n",
       "      <td>30.000</td>\n",
       "      <td>1.153837</td>\n",
       "      <td>29.0000</td>\n",
       "      <td>30.2700</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.256437</td>\n",
       "      <td>...</td>\n",
       "      <td>17.0000</td>\n",
       "      <td>19.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.40</td>\n",
       "      <td>0.701625</td>\n",
       "      <td>0.710</td>\n",
       "      <td>0.481103</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>0.9400</td>\n",
       "      <td>bending2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>19.00</td>\n",
       "      <td>45.50</td>\n",
       "      <td>30.938104</td>\n",
       "      <td>29.000</td>\n",
       "      <td>7.684146</td>\n",
       "      <td>26.7500</td>\n",
       "      <td>38.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.40</td>\n",
       "      <td>0.467167</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0000</td>\n",
       "      <td>20.8125</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.73</td>\n",
       "      <td>1.107354</td>\n",
       "      <td>0.830</td>\n",
       "      <td>1.080842</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.3000</td>\n",
       "      <td>bending2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>25.00</td>\n",
       "      <td>47.50</td>\n",
       "      <td>31.058250</td>\n",
       "      <td>29.710</td>\n",
       "      <td>4.829794</td>\n",
       "      <td>27.5000</td>\n",
       "      <td>31.8125</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.38</td>\n",
       "      <td>0.405458</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0000</td>\n",
       "      <td>18.3125</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.92</td>\n",
       "      <td>1.098104</td>\n",
       "      <td>0.940</td>\n",
       "      <td>0.831480</td>\n",
       "      <td>0.5000</td>\n",
       "      <td>1.3000</td>\n",
       "      <td>bending2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>19.00</td>\n",
       "      <td>44.00</td>\n",
       "      <td>36.228396</td>\n",
       "      <td>36.000</td>\n",
       "      <td>3.528617</td>\n",
       "      <td>34.0000</td>\n",
       "      <td>39.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.28</td>\n",
       "      <td>2.831687</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0000</td>\n",
       "      <td>18.0625</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.98</td>\n",
       "      <td>3.480688</td>\n",
       "      <td>3.340</td>\n",
       "      <td>1.827769</td>\n",
       "      <td>2.1025</td>\n",
       "      <td>4.5500</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>26.50</td>\n",
       "      <td>44.33</td>\n",
       "      <td>36.687292</td>\n",
       "      <td>36.000</td>\n",
       "      <td>3.529404</td>\n",
       "      <td>34.2500</td>\n",
       "      <td>39.3725</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.89</td>\n",
       "      <td>2.973042</td>\n",
       "      <td>...</td>\n",
       "      <td>14.6700</td>\n",
       "      <td>18.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.19</td>\n",
       "      <td>3.073313</td>\n",
       "      <td>2.690</td>\n",
       "      <td>1.629675</td>\n",
       "      <td>1.9125</td>\n",
       "      <td>4.0875</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>25.33</td>\n",
       "      <td>45.00</td>\n",
       "      <td>37.114313</td>\n",
       "      <td>36.250</td>\n",
       "      <td>3.710385</td>\n",
       "      <td>34.5000</td>\n",
       "      <td>40.2500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.84</td>\n",
       "      <td>2.730000</td>\n",
       "      <td>...</td>\n",
       "      <td>14.7500</td>\n",
       "      <td>18.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.50</td>\n",
       "      <td>3.076354</td>\n",
       "      <td>2.770</td>\n",
       "      <td>1.824534</td>\n",
       "      <td>1.7000</td>\n",
       "      <td>4.0375</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>26.75</td>\n",
       "      <td>44.75</td>\n",
       "      <td>36.863375</td>\n",
       "      <td>36.330</td>\n",
       "      <td>3.555787</td>\n",
       "      <td>34.5000</td>\n",
       "      <td>39.7500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.68</td>\n",
       "      <td>2.757312</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0000</td>\n",
       "      <td>18.6700</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.81</td>\n",
       "      <td>2.773313</td>\n",
       "      <td>2.590</td>\n",
       "      <td>1.569919</td>\n",
       "      <td>1.6400</td>\n",
       "      <td>3.6325</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>26.25</td>\n",
       "      <td>44.25</td>\n",
       "      <td>36.957458</td>\n",
       "      <td>36.290</td>\n",
       "      <td>3.434863</td>\n",
       "      <td>34.5000</td>\n",
       "      <td>40.2500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.64</td>\n",
       "      <td>2.420083</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0000</td>\n",
       "      <td>18.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.34</td>\n",
       "      <td>2.934625</td>\n",
       "      <td>2.525</td>\n",
       "      <td>1.631380</td>\n",
       "      <td>1.6600</td>\n",
       "      <td>4.0300</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>27.75</td>\n",
       "      <td>44.67</td>\n",
       "      <td>37.144833</td>\n",
       "      <td>36.330</td>\n",
       "      <td>3.758904</td>\n",
       "      <td>34.0000</td>\n",
       "      <td>40.5000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.76</td>\n",
       "      <td>2.419062</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0000</td>\n",
       "      <td>18.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.75</td>\n",
       "      <td>2.822437</td>\n",
       "      <td>2.590</td>\n",
       "      <td>1.637183</td>\n",
       "      <td>1.5800</td>\n",
       "      <td>3.7400</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>27.00</td>\n",
       "      <td>45.00</td>\n",
       "      <td>36.819521</td>\n",
       "      <td>36.000</td>\n",
       "      <td>3.900459</td>\n",
       "      <td>33.7500</td>\n",
       "      <td>40.2500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.47</td>\n",
       "      <td>2.600146</td>\n",
       "      <td>...</td>\n",
       "      <td>15.5000</td>\n",
       "      <td>19.2700</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.99</td>\n",
       "      <td>2.887563</td>\n",
       "      <td>2.525</td>\n",
       "      <td>1.723094</td>\n",
       "      <td>1.5600</td>\n",
       "      <td>3.7700</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>27.00</td>\n",
       "      <td>44.33</td>\n",
       "      <td>36.541667</td>\n",
       "      <td>36.000</td>\n",
       "      <td>4.018922</td>\n",
       "      <td>33.2500</td>\n",
       "      <td>39.8125</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.43</td>\n",
       "      <td>2.847958</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0000</td>\n",
       "      <td>19.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.18</td>\n",
       "      <td>3.225458</td>\n",
       "      <td>2.870</td>\n",
       "      <td>1.769758</td>\n",
       "      <td>1.8850</td>\n",
       "      <td>4.2625</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18.50</td>\n",
       "      <td>44.25</td>\n",
       "      <td>35.752354</td>\n",
       "      <td>36.000</td>\n",
       "      <td>4.614802</td>\n",
       "      <td>33.0000</td>\n",
       "      <td>39.3300</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.60</td>\n",
       "      <td>3.328104</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0000</td>\n",
       "      <td>18.0625</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.39</td>\n",
       "      <td>3.069667</td>\n",
       "      <td>2.770</td>\n",
       "      <td>1.748326</td>\n",
       "      <td>1.7975</td>\n",
       "      <td>4.0600</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19.00</td>\n",
       "      <td>43.75</td>\n",
       "      <td>35.879875</td>\n",
       "      <td>36.000</td>\n",
       "      <td>4.614878</td>\n",
       "      <td>33.0000</td>\n",
       "      <td>39.5000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.20</td>\n",
       "      <td>3.414312</td>\n",
       "      <td>...</td>\n",
       "      <td>14.7500</td>\n",
       "      <td>19.6900</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.50</td>\n",
       "      <td>3.093021</td>\n",
       "      <td>2.930</td>\n",
       "      <td>1.626034</td>\n",
       "      <td>1.8900</td>\n",
       "      <td>4.0600</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>23.33</td>\n",
       "      <td>43.50</td>\n",
       "      <td>36.244083</td>\n",
       "      <td>36.750</td>\n",
       "      <td>3.822016</td>\n",
       "      <td>33.4575</td>\n",
       "      <td>39.2500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.71</td>\n",
       "      <td>2.736021</td>\n",
       "      <td>...</td>\n",
       "      <td>15.7500</td>\n",
       "      <td>21.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>11.15</td>\n",
       "      <td>3.530500</td>\n",
       "      <td>3.110</td>\n",
       "      <td>1.963685</td>\n",
       "      <td>2.1700</td>\n",
       "      <td>4.6175</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>24.25</td>\n",
       "      <td>45.00</td>\n",
       "      <td>37.177042</td>\n",
       "      <td>36.250</td>\n",
       "      <td>3.581301</td>\n",
       "      <td>34.5000</td>\n",
       "      <td>40.2500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.58</td>\n",
       "      <td>2.374208</td>\n",
       "      <td>...</td>\n",
       "      <td>17.9500</td>\n",
       "      <td>21.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.34</td>\n",
       "      <td>2.921729</td>\n",
       "      <td>2.500</td>\n",
       "      <td>1.852600</td>\n",
       "      <td>1.5000</td>\n",
       "      <td>3.9000</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>34.00</td>\n",
       "      <td>51.00</td>\n",
       "      <td>42.706063</td>\n",
       "      <td>40.500</td>\n",
       "      <td>3.537476</td>\n",
       "      <td>40.2500</td>\n",
       "      <td>48.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.85</td>\n",
       "      <td>0.519813</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>8.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.97</td>\n",
       "      <td>0.549312</td>\n",
       "      <td>0.470</td>\n",
       "      <td>0.648403</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.8300</td>\n",
       "      <td>lying</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>39.00</td>\n",
       "      <td>41.00</td>\n",
       "      <td>39.667833</td>\n",
       "      <td>39.500</td>\n",
       "      <td>0.280158</td>\n",
       "      <td>39.5000</td>\n",
       "      <td>39.7500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.583604</td>\n",
       "      <td>...</td>\n",
       "      <td>1.6275</td>\n",
       "      <td>9.3300</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.49</td>\n",
       "      <td>0.635938</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.608399</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.8300</td>\n",
       "      <td>lying</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0.00</td>\n",
       "      <td>40.67</td>\n",
       "      <td>39.506188</td>\n",
       "      <td>39.500</td>\n",
       "      <td>1.817498</td>\n",
       "      <td>39.5000</td>\n",
       "      <td>39.6700</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.496479</td>\n",
       "      <td>...</td>\n",
       "      <td>11.3300</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.19</td>\n",
       "      <td>0.622917</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.498889</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>0.8700</td>\n",
       "      <td>lying</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>39.00</td>\n",
       "      <td>40.00</td>\n",
       "      <td>39.433792</td>\n",
       "      <td>39.500</td>\n",
       "      <td>0.208558</td>\n",
       "      <td>39.3300</td>\n",
       "      <td>39.5000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.422104</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0000</td>\n",
       "      <td>12.3300</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.06</td>\n",
       "      <td>0.582708</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.438442</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>0.8300</td>\n",
       "      <td>lying</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>39.00</td>\n",
       "      <td>40.00</td>\n",
       "      <td>39.347104</td>\n",
       "      <td>39.330</td>\n",
       "      <td>0.231405</td>\n",
       "      <td>39.2500</td>\n",
       "      <td>39.5000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.366396</td>\n",
       "      <td>...</td>\n",
       "      <td>15.7500</td>\n",
       "      <td>17.6700</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.50</td>\n",
       "      <td>0.588458</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.423435</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>0.8300</td>\n",
       "      <td>lying</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>39.00</td>\n",
       "      <td>56.25</td>\n",
       "      <td>47.325125</td>\n",
       "      <td>42.670</td>\n",
       "      <td>5.961280</td>\n",
       "      <td>42.0000</td>\n",
       "      <td>54.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.49</td>\n",
       "      <td>0.274313</td>\n",
       "      <td>...</td>\n",
       "      <td>11.7500</td>\n",
       "      <td>18.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.72</td>\n",
       "      <td>0.766167</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.723953</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>lying</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>23.50</td>\n",
       "      <td>30.00</td>\n",
       "      <td>27.716375</td>\n",
       "      <td>27.500</td>\n",
       "      <td>1.442253</td>\n",
       "      <td>27.0000</td>\n",
       "      <td>29.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.79</td>\n",
       "      <td>0.363687</td>\n",
       "      <td>...</td>\n",
       "      <td>5.5000</td>\n",
       "      <td>10.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.50</td>\n",
       "      <td>0.735396</td>\n",
       "      <td>0.710</td>\n",
       "      <td>0.612834</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>lying</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>48.00</td>\n",
       "      <td>48.25</td>\n",
       "      <td>48.004167</td>\n",
       "      <td>48.000</td>\n",
       "      <td>0.032038</td>\n",
       "      <td>48.0000</td>\n",
       "      <td>48.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.43</td>\n",
       "      <td>0.007167</td>\n",
       "      <td>...</td>\n",
       "      <td>4.6700</td>\n",
       "      <td>10.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.50</td>\n",
       "      <td>0.641229</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.388372</td>\n",
       "      <td>0.4600</td>\n",
       "      <td>0.8300</td>\n",
       "      <td>lying</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>39.00</td>\n",
       "      <td>41.00</td>\n",
       "      <td>39.667833</td>\n",
       "      <td>39.500</td>\n",
       "      <td>0.280158</td>\n",
       "      <td>39.5000</td>\n",
       "      <td>39.7500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.583604</td>\n",
       "      <td>...</td>\n",
       "      <td>1.6275</td>\n",
       "      <td>9.3300</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.49</td>\n",
       "      <td>0.635938</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.608399</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.8300</td>\n",
       "      <td>lying</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>35.25</td>\n",
       "      <td>48.50</td>\n",
       "      <td>40.219271</td>\n",
       "      <td>39.250</td>\n",
       "      <td>2.741217</td>\n",
       "      <td>37.7500</td>\n",
       "      <td>42.5000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.28</td>\n",
       "      <td>0.617479</td>\n",
       "      <td>...</td>\n",
       "      <td>11.6700</td>\n",
       "      <td>19.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.36</td>\n",
       "      <td>1.057729</td>\n",
       "      <td>0.830</td>\n",
       "      <td>1.025925</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.3000</td>\n",
       "      <td>sitting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>28.50</td>\n",
       "      <td>48.25</td>\n",
       "      <td>43.884833</td>\n",
       "      <td>45.250</td>\n",
       "      <td>3.198894</td>\n",
       "      <td>42.0000</td>\n",
       "      <td>46.5000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.28</td>\n",
       "      <td>0.517354</td>\n",
       "      <td>...</td>\n",
       "      <td>10.5000</td>\n",
       "      <td>19.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>1.354917</td>\n",
       "      <td>1.090</td>\n",
       "      <td>1.150883</td>\n",
       "      <td>0.5000</td>\n",
       "      <td>1.7000</td>\n",
       "      <td>sitting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>39.50</td>\n",
       "      <td>45.00</td>\n",
       "      <td>42.111583</td>\n",
       "      <td>42.000</td>\n",
       "      <td>1.122245</td>\n",
       "      <td>41.5000</td>\n",
       "      <td>42.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.09</td>\n",
       "      <td>0.341938</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0000</td>\n",
       "      <td>17.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.36</td>\n",
       "      <td>0.961167</td>\n",
       "      <td>0.820</td>\n",
       "      <td>0.882784</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.2200</td>\n",
       "      <td>sitting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>39.67</td>\n",
       "      <td>44.75</td>\n",
       "      <td>42.282667</td>\n",
       "      <td>41.500</td>\n",
       "      <td>1.356149</td>\n",
       "      <td>41.5000</td>\n",
       "      <td>44.3300</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.498354</td>\n",
       "      <td>...</td>\n",
       "      <td>8.5000</td>\n",
       "      <td>18.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.85</td>\n",
       "      <td>0.869000</td>\n",
       "      <td>0.820</td>\n",
       "      <td>0.794213</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>sitting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>40.00</td>\n",
       "      <td>44.67</td>\n",
       "      <td>42.360188</td>\n",
       "      <td>42.000</td>\n",
       "      <td>1.017372</td>\n",
       "      <td>41.5000</td>\n",
       "      <td>43.2500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.482500</td>\n",
       "      <td>...</td>\n",
       "      <td>9.7500</td>\n",
       "      <td>22.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.64</td>\n",
       "      <td>0.719812</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.608546</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>0.8300</td>\n",
       "      <td>sitting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>29.25</td>\n",
       "      <td>46.00</td>\n",
       "      <td>42.728854</td>\n",
       "      <td>43.250</td>\n",
       "      <td>2.046362</td>\n",
       "      <td>41.3300</td>\n",
       "      <td>44.5000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.72</td>\n",
       "      <td>0.555333</td>\n",
       "      <td>...</td>\n",
       "      <td>13.7300</td>\n",
       "      <td>19.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.10</td>\n",
       "      <td>0.892083</td>\n",
       "      <td>0.710</td>\n",
       "      <td>0.851175</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>1.2200</td>\n",
       "      <td>sitting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>30.00</td>\n",
       "      <td>46.67</td>\n",
       "      <td>42.648521</td>\n",
       "      <td>42.750</td>\n",
       "      <td>2.395338</td>\n",
       "      <td>41.5000</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.95</td>\n",
       "      <td>0.402833</td>\n",
       "      <td>...</td>\n",
       "      <td>10.6275</td>\n",
       "      <td>14.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.64</td>\n",
       "      <td>0.917354</td>\n",
       "      <td>0.830</td>\n",
       "      <td>0.709638</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.1200</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>36.00</td>\n",
       "      <td>47.50</td>\n",
       "      <td>43.720021</td>\n",
       "      <td>45.000</td>\n",
       "      <td>2.384105</td>\n",
       "      <td>43.0000</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.92</td>\n",
       "      <td>0.366708</td>\n",
       "      <td>...</td>\n",
       "      <td>11.3100</td>\n",
       "      <td>15.5425</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.18</td>\n",
       "      <td>1.039687</td>\n",
       "      <td>0.830</td>\n",
       "      <td>0.916657</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.2200</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>34.50</td>\n",
       "      <td>47.75</td>\n",
       "      <td>44.471146</td>\n",
       "      <td>45.000</td>\n",
       "      <td>1.772553</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>45.2500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.290479</td>\n",
       "      <td>...</td>\n",
       "      <td>12.0000</td>\n",
       "      <td>14.8125</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.32</td>\n",
       "      <td>0.927375</td>\n",
       "      <td>0.830</td>\n",
       "      <td>0.756436</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.2200</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>35.50</td>\n",
       "      <td>48.00</td>\n",
       "      <td>46.224938</td>\n",
       "      <td>46.000</td>\n",
       "      <td>1.748315</td>\n",
       "      <td>45.2500</td>\n",
       "      <td>48.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.50</td>\n",
       "      <td>0.312354</td>\n",
       "      <td>...</td>\n",
       "      <td>12.0000</td>\n",
       "      <td>15.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.00</td>\n",
       "      <td>0.882583</td>\n",
       "      <td>0.830</td>\n",
       "      <td>0.668423</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.1200</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>29.75</td>\n",
       "      <td>48.00</td>\n",
       "      <td>46.932208</td>\n",
       "      <td>47.500</td>\n",
       "      <td>1.832665</td>\n",
       "      <td>47.2375</td>\n",
       "      <td>47.7500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.60</td>\n",
       "      <td>0.429667</td>\n",
       "      <td>...</td>\n",
       "      <td>11.6700</td>\n",
       "      <td>15.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.58</td>\n",
       "      <td>0.991125</td>\n",
       "      <td>0.830</td>\n",
       "      <td>0.855329</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.2200</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>36.33</td>\n",
       "      <td>47.67</td>\n",
       "      <td>45.399625</td>\n",
       "      <td>45.500</td>\n",
       "      <td>1.328121</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>46.3300</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.66</td>\n",
       "      <td>0.460146</td>\n",
       "      <td>...</td>\n",
       "      <td>11.2500</td>\n",
       "      <td>14.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.50</td>\n",
       "      <td>0.795104</td>\n",
       "      <td>0.820</td>\n",
       "      <td>0.503007</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>36.00</td>\n",
       "      <td>45.80</td>\n",
       "      <td>42.419917</td>\n",
       "      <td>42.670</td>\n",
       "      <td>2.520129</td>\n",
       "      <td>41.3300</td>\n",
       "      <td>44.6175</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.12</td>\n",
       "      <td>0.460562</td>\n",
       "      <td>...</td>\n",
       "      <td>7.6275</td>\n",
       "      <td>12.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.65</td>\n",
       "      <td>1.226271</td>\n",
       "      <td>1.090</td>\n",
       "      <td>0.891988</td>\n",
       "      <td>0.5000</td>\n",
       "      <td>1.5850</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>37.00</td>\n",
       "      <td>48.25</td>\n",
       "      <td>42.516958</td>\n",
       "      <td>42.500</td>\n",
       "      <td>2.195751</td>\n",
       "      <td>41.0000</td>\n",
       "      <td>44.5000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.12</td>\n",
       "      <td>0.440687</td>\n",
       "      <td>...</td>\n",
       "      <td>12.6275</td>\n",
       "      <td>17.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.85</td>\n",
       "      <td>0.977417</td>\n",
       "      <td>0.830</td>\n",
       "      <td>0.853280</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.2200</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>36.25</td>\n",
       "      <td>45.50</td>\n",
       "      <td>42.959354</td>\n",
       "      <td>42.670</td>\n",
       "      <td>1.500878</td>\n",
       "      <td>42.0000</td>\n",
       "      <td>44.3300</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.60</td>\n",
       "      <td>0.352875</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0000</td>\n",
       "      <td>16.6900</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.748479</td>\n",
       "      <td>0.820</td>\n",
       "      <td>0.461152</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>0.9500</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>36.00</td>\n",
       "      <td>47.33</td>\n",
       "      <td>42.674583</td>\n",
       "      <td>43.670</td>\n",
       "      <td>2.384170</td>\n",
       "      <td>40.0000</td>\n",
       "      <td>44.7500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.17</td>\n",
       "      <td>0.419167</td>\n",
       "      <td>...</td>\n",
       "      <td>12.7500</td>\n",
       "      <td>16.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.77</td>\n",
       "      <td>0.702042</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.567451</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>0.9400</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>36.25</td>\n",
       "      <td>45.75</td>\n",
       "      <td>43.187521</td>\n",
       "      <td>44.750</td>\n",
       "      <td>2.491162</td>\n",
       "      <td>39.7500</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.83</td>\n",
       "      <td>0.271271</td>\n",
       "      <td>...</td>\n",
       "      <td>16.5000</td>\n",
       "      <td>21.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.83</td>\n",
       "      <td>0.645458</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.567419</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>0.8300</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>36.00</td>\n",
       "      <td>47.33</td>\n",
       "      <td>44.441187</td>\n",
       "      <td>45.000</td>\n",
       "      <td>2.417797</td>\n",
       "      <td>44.6275</td>\n",
       "      <td>45.7500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.50</td>\n",
       "      <td>0.346604</td>\n",
       "      <td>...</td>\n",
       "      <td>11.0000</td>\n",
       "      <td>14.6700</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.91</td>\n",
       "      <td>1.155083</td>\n",
       "      <td>0.940</td>\n",
       "      <td>0.842087</td>\n",
       "      <td>0.5000</td>\n",
       "      <td>1.5000</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>18.00</td>\n",
       "      <td>46.00</td>\n",
       "      <td>35.193333</td>\n",
       "      <td>36.000</td>\n",
       "      <td>4.751868</td>\n",
       "      <td>32.0000</td>\n",
       "      <td>38.7500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.20</td>\n",
       "      <td>4.321021</td>\n",
       "      <td>...</td>\n",
       "      <td>14.2500</td>\n",
       "      <td>18.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.50</td>\n",
       "      <td>3.241958</td>\n",
       "      <td>3.015</td>\n",
       "      <td>1.769182</td>\n",
       "      <td>1.8850</td>\n",
       "      <td>4.4400</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>20.75</td>\n",
       "      <td>46.25</td>\n",
       "      <td>34.763333</td>\n",
       "      <td>35.290</td>\n",
       "      <td>4.742208</td>\n",
       "      <td>31.6700</td>\n",
       "      <td>38.2500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.68</td>\n",
       "      <td>4.223792</td>\n",
       "      <td>...</td>\n",
       "      <td>14.2500</td>\n",
       "      <td>18.3300</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.39</td>\n",
       "      <td>3.288271</td>\n",
       "      <td>3.270</td>\n",
       "      <td>1.647528</td>\n",
       "      <td>2.0500</td>\n",
       "      <td>4.3050</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>21.50</td>\n",
       "      <td>51.00</td>\n",
       "      <td>34.935812</td>\n",
       "      <td>35.500</td>\n",
       "      <td>4.645944</td>\n",
       "      <td>32.0000</td>\n",
       "      <td>38.0625</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.21</td>\n",
       "      <td>4.115750</td>\n",
       "      <td>...</td>\n",
       "      <td>14.2375</td>\n",
       "      <td>18.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10.21</td>\n",
       "      <td>3.280021</td>\n",
       "      <td>3.015</td>\n",
       "      <td>1.700918</td>\n",
       "      <td>2.1200</td>\n",
       "      <td>4.5000</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>18.33</td>\n",
       "      <td>47.67</td>\n",
       "      <td>34.333042</td>\n",
       "      <td>34.750</td>\n",
       "      <td>4.948770</td>\n",
       "      <td>31.2500</td>\n",
       "      <td>38.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.48</td>\n",
       "      <td>4.396958</td>\n",
       "      <td>...</td>\n",
       "      <td>13.7500</td>\n",
       "      <td>18.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.01</td>\n",
       "      <td>3.261583</td>\n",
       "      <td>2.980</td>\n",
       "      <td>1.617290</td>\n",
       "      <td>2.0500</td>\n",
       "      <td>4.3200</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>18.33</td>\n",
       "      <td>45.75</td>\n",
       "      <td>34.599875</td>\n",
       "      <td>35.125</td>\n",
       "      <td>4.731790</td>\n",
       "      <td>31.5000</td>\n",
       "      <td>38.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.37</td>\n",
       "      <td>4.398833</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0000</td>\n",
       "      <td>18.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.86</td>\n",
       "      <td>3.289542</td>\n",
       "      <td>3.015</td>\n",
       "      <td>1.680170</td>\n",
       "      <td>2.1200</td>\n",
       "      <td>4.2600</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>15.50</td>\n",
       "      <td>43.67</td>\n",
       "      <td>34.225875</td>\n",
       "      <td>34.750</td>\n",
       "      <td>4.441798</td>\n",
       "      <td>31.2500</td>\n",
       "      <td>37.2500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17.24</td>\n",
       "      <td>4.354500</td>\n",
       "      <td>...</td>\n",
       "      <td>14.3300</td>\n",
       "      <td>18.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.42</td>\n",
       "      <td>3.479542</td>\n",
       "      <td>3.270</td>\n",
       "      <td>1.761146</td>\n",
       "      <td>2.2400</td>\n",
       "      <td>4.5375</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>21.50</td>\n",
       "      <td>51.25</td>\n",
       "      <td>34.253521</td>\n",
       "      <td>35.000</td>\n",
       "      <td>4.940741</td>\n",
       "      <td>30.9375</td>\n",
       "      <td>37.7500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.55</td>\n",
       "      <td>4.457896</td>\n",
       "      <td>...</td>\n",
       "      <td>13.7500</td>\n",
       "      <td>18.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.32</td>\n",
       "      <td>3.500750</td>\n",
       "      <td>3.285</td>\n",
       "      <td>1.692378</td>\n",
       "      <td>2.1800</td>\n",
       "      <td>4.5575</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>19.50</td>\n",
       "      <td>45.33</td>\n",
       "      <td>33.586875</td>\n",
       "      <td>34.250</td>\n",
       "      <td>4.650935</td>\n",
       "      <td>30.2500</td>\n",
       "      <td>37.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14.67</td>\n",
       "      <td>4.576562</td>\n",
       "      <td>...</td>\n",
       "      <td>13.7300</td>\n",
       "      <td>18.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.32</td>\n",
       "      <td>3.259729</td>\n",
       "      <td>3.110</td>\n",
       "      <td>1.640243</td>\n",
       "      <td>2.0500</td>\n",
       "      <td>4.3225</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>19.75</td>\n",
       "      <td>45.50</td>\n",
       "      <td>34.322750</td>\n",
       "      <td>35.250</td>\n",
       "      <td>4.752477</td>\n",
       "      <td>31.0000</td>\n",
       "      <td>38.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.47</td>\n",
       "      <td>4.456333</td>\n",
       "      <td>...</td>\n",
       "      <td>13.5000</td>\n",
       "      <td>17.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.67</td>\n",
       "      <td>3.432563</td>\n",
       "      <td>3.200</td>\n",
       "      <td>1.732727</td>\n",
       "      <td>2.1575</td>\n",
       "      <td>4.5650</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>19.50</td>\n",
       "      <td>46.00</td>\n",
       "      <td>34.546229</td>\n",
       "      <td>35.250</td>\n",
       "      <td>4.842294</td>\n",
       "      <td>31.2500</td>\n",
       "      <td>37.8125</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.47</td>\n",
       "      <td>4.371958</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0000</td>\n",
       "      <td>17.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>3.338125</td>\n",
       "      <td>3.080</td>\n",
       "      <td>1.656742</td>\n",
       "      <td>2.1600</td>\n",
       "      <td>4.3350</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>23.50</td>\n",
       "      <td>46.25</td>\n",
       "      <td>34.873229</td>\n",
       "      <td>35.250</td>\n",
       "      <td>4.531720</td>\n",
       "      <td>31.7500</td>\n",
       "      <td>38.2500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14.82</td>\n",
       "      <td>4.380583</td>\n",
       "      <td>...</td>\n",
       "      <td>13.7500</td>\n",
       "      <td>18.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.51</td>\n",
       "      <td>3.424646</td>\n",
       "      <td>3.270</td>\n",
       "      <td>1.690960</td>\n",
       "      <td>2.1700</td>\n",
       "      <td>4.5000</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>19.25</td>\n",
       "      <td>44.00</td>\n",
       "      <td>34.473188</td>\n",
       "      <td>35.000</td>\n",
       "      <td>4.796705</td>\n",
       "      <td>31.2500</td>\n",
       "      <td>38.0000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.86</td>\n",
       "      <td>4.359312</td>\n",
       "      <td>...</td>\n",
       "      <td>13.7300</td>\n",
       "      <td>17.7500</td>\n",
       "      <td>0.43</td>\n",
       "      <td>9.00</td>\n",
       "      <td>3.340458</td>\n",
       "      <td>3.090</td>\n",
       "      <td>1.699114</td>\n",
       "      <td>2.1200</td>\n",
       "      <td>4.3750</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>69 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     min1   max1      mean1  median1      std1  1st_quart1  3rd_quart1  min2  \\\n",
       "0   35.00  47.40  43.954500   44.330  1.558835     43.0000     45.0000   0.0   \n",
       "1   33.00  47.75  42.179812   43.500  3.670666     39.1500     45.0000   0.0   \n",
       "2   33.00  45.75  41.678063   41.750  2.243490     41.3300     42.7500   0.0   \n",
       "3   37.00  48.00  43.454958   43.250  1.386098     42.5000     45.0000   0.0   \n",
       "4   36.25  48.00  43.969125   44.500  1.618364     43.3100     44.6700   0.0   \n",
       "5   21.00  50.00  32.586208   33.000  6.238143     26.1875     34.5000   0.0   \n",
       "6   27.50  33.00  29.881938   30.000  1.153837     29.0000     30.2700   0.0   \n",
       "7   19.00  45.50  30.938104   29.000  7.684146     26.7500     38.0000   0.0   \n",
       "8   25.00  47.50  31.058250   29.710  4.829794     27.5000     31.8125   0.0   \n",
       "9   19.00  44.00  36.228396   36.000  3.528617     34.0000     39.0000   0.0   \n",
       "10  26.50  44.33  36.687292   36.000  3.529404     34.2500     39.3725   0.0   \n",
       "11  25.33  45.00  37.114313   36.250  3.710385     34.5000     40.2500   0.0   \n",
       "12  26.75  44.75  36.863375   36.330  3.555787     34.5000     39.7500   0.0   \n",
       "13  26.25  44.25  36.957458   36.290  3.434863     34.5000     40.2500   0.0   \n",
       "14  27.75  44.67  37.144833   36.330  3.758904     34.0000     40.5000   0.0   \n",
       "15  27.00  45.00  36.819521   36.000  3.900459     33.7500     40.2500   0.0   \n",
       "16  27.00  44.33  36.541667   36.000  4.018922     33.2500     39.8125   0.0   \n",
       "17  18.50  44.25  35.752354   36.000  4.614802     33.0000     39.3300   0.0   \n",
       "18  19.00  43.75  35.879875   36.000  4.614878     33.0000     39.5000   0.0   \n",
       "19  23.33  43.50  36.244083   36.750  3.822016     33.4575     39.2500   0.0   \n",
       "20  24.25  45.00  37.177042   36.250  3.581301     34.5000     40.2500   0.0   \n",
       "21  34.00  51.00  42.706063   40.500  3.537476     40.2500     48.0000   0.0   \n",
       "22  39.00  41.00  39.667833   39.500  0.280158     39.5000     39.7500   0.0   \n",
       "23   0.00  40.67  39.506188   39.500  1.817498     39.5000     39.6700   0.0   \n",
       "24  39.00  40.00  39.433792   39.500  0.208558     39.3300     39.5000   0.0   \n",
       "25  39.00  40.00  39.347104   39.330  0.231405     39.2500     39.5000   0.0   \n",
       "26  39.00  56.25  47.325125   42.670  5.961280     42.0000     54.0000   0.0   \n",
       "27  23.50  30.00  27.716375   27.500  1.442253     27.0000     29.0000   0.0   \n",
       "28  48.00  48.25  48.004167   48.000  0.032038     48.0000     48.0000   0.0   \n",
       "29  39.00  41.00  39.667833   39.500  0.280158     39.5000     39.7500   0.0   \n",
       "..    ...    ...        ...      ...       ...         ...         ...   ...   \n",
       "39  35.25  48.50  40.219271   39.250  2.741217     37.7500     42.5000   0.0   \n",
       "40  28.50  48.25  43.884833   45.250  3.198894     42.0000     46.5000   0.0   \n",
       "41  39.50  45.00  42.111583   42.000  1.122245     41.5000     42.0000   0.0   \n",
       "42  39.67  44.75  42.282667   41.500  1.356149     41.5000     44.3300   0.0   \n",
       "43  40.00  44.67  42.360188   42.000  1.017372     41.5000     43.2500   0.0   \n",
       "44  29.25  46.00  42.728854   43.250  2.046362     41.3300     44.5000   0.0   \n",
       "45  30.00  46.67  42.648521   42.750  2.395338     41.5000     45.0000   0.0   \n",
       "46  36.00  47.50  43.720021   45.000  2.384105     43.0000     45.0000   0.0   \n",
       "47  34.50  47.75  44.471146   45.000  1.772553     45.0000     45.2500   0.0   \n",
       "48  35.50  48.00  46.224938   46.000  1.748315     45.2500     48.0000   0.0   \n",
       "49  29.75  48.00  46.932208   47.500  1.832665     47.2375     47.7500   0.0   \n",
       "50  36.33  47.67  45.399625   45.500  1.328121     45.0000     46.3300   0.0   \n",
       "51  36.00  45.80  42.419917   42.670  2.520129     41.3300     44.6175   0.0   \n",
       "52  37.00  48.25  42.516958   42.500  2.195751     41.0000     44.5000   0.0   \n",
       "53  36.25  45.50  42.959354   42.670  1.500878     42.0000     44.3300   0.0   \n",
       "54  36.00  47.33  42.674583   43.670  2.384170     40.0000     44.7500   0.0   \n",
       "55  36.25  45.75  43.187521   44.750  2.491162     39.7500     45.0000   0.0   \n",
       "56  36.00  47.33  44.441187   45.000  2.417797     44.6275     45.7500   0.0   \n",
       "57  18.00  46.00  35.193333   36.000  4.751868     32.0000     38.7500   0.0   \n",
       "58  20.75  46.25  34.763333   35.290  4.742208     31.6700     38.2500   0.0   \n",
       "59  21.50  51.00  34.935812   35.500  4.645944     32.0000     38.0625   0.0   \n",
       "60  18.33  47.67  34.333042   34.750  4.948770     31.2500     38.0000   0.0   \n",
       "61  18.33  45.75  34.599875   35.125  4.731790     31.5000     38.0000   0.0   \n",
       "62  15.50  43.67  34.225875   34.750  4.441798     31.2500     37.2500   0.0   \n",
       "63  21.50  51.25  34.253521   35.000  4.940741     30.9375     37.7500   0.0   \n",
       "64  19.50  45.33  33.586875   34.250  4.650935     30.2500     37.0000   0.0   \n",
       "65  19.75  45.50  34.322750   35.250  4.752477     31.0000     38.0000   0.0   \n",
       "66  19.50  46.00  34.546229   35.250  4.842294     31.2500     37.8125   0.0   \n",
       "67  23.50  46.25  34.873229   35.250  4.531720     31.7500     38.2500   0.0   \n",
       "68  19.25  44.00  34.473188   35.000  4.796705     31.2500     38.0000   0.0   \n",
       "\n",
       "     max2     mean2    ...     1st_quart5  3rd_quart5  min6   max6     mean6  \\\n",
       "0    1.70  0.426250    ...        35.3625     36.5000  0.00   1.79  0.493292   \n",
       "1    3.00  0.696042    ...        30.4575     36.3300  0.00   2.18  0.613521   \n",
       "2    2.83  0.535979    ...        28.4575     31.2500  0.00   1.79  0.383292   \n",
       "3    1.58  0.378083    ...        22.2500     24.0000  0.00   5.26  0.679646   \n",
       "4    1.50  0.413125    ...        20.5000     23.7500  0.00   2.96  0.555312   \n",
       "5    9.90  0.516125    ...        17.6700     23.5000  0.00  13.61  1.162042   \n",
       "6    1.00  0.256437    ...        17.0000     19.0000  0.00   6.40  0.701625   \n",
       "7    6.40  0.467167    ...        15.0000     20.8125  0.00   6.73  1.107354   \n",
       "8    6.38  0.405458    ...         9.0000     18.3125  0.00   4.92  1.098104   \n",
       "9   12.28  2.831687    ...        14.0000     18.0625  0.00   9.98  3.480688   \n",
       "10  12.89  2.973042    ...        14.6700     18.5000  0.00   8.19  3.073313   \n",
       "11  10.84  2.730000    ...        14.7500     18.5000  0.00   9.50  3.076354   \n",
       "12  11.68  2.757312    ...        15.0000     18.6700  0.00   8.81  2.773313   \n",
       "13   8.64  2.420083    ...        14.0000     18.2500  0.00   8.34  2.934625   \n",
       "14  10.76  2.419062    ...        15.0000     18.7500  0.00   8.75  2.822437   \n",
       "15  10.47  2.600146    ...        15.5000     19.2700  0.00   8.99  2.887563   \n",
       "16  10.43  2.847958    ...        15.0000     19.5000  0.00   9.18  3.225458   \n",
       "17  12.60  3.328104    ...        14.0000     18.0625  0.00   9.39  3.069667   \n",
       "18  11.20  3.414312    ...        14.7500     19.6900  0.00   8.50  3.093021   \n",
       "19   9.71  2.736021    ...        15.7500     21.0000  0.00  11.15  3.530500   \n",
       "20   8.58  2.374208    ...        17.9500     21.7500  0.00   9.34  2.921729   \n",
       "21   4.85  0.519813    ...         1.0000      8.0000  0.00   4.97  0.549312   \n",
       "22   1.00  0.583604    ...         1.6275      9.3300  0.00   3.49  0.635938   \n",
       "23   1.00  0.496479    ...        11.3300     13.0000  0.00   3.19  0.622917   \n",
       "24   1.00  0.422104    ...         9.0000     12.3300  0.00   4.06  0.582708   \n",
       "25   0.50  0.366396    ...        15.7500     17.6700  0.00   3.50  0.588458   \n",
       "26   8.49  0.274313    ...        11.7500     18.0000  0.00   5.72  0.766167   \n",
       "27   1.79  0.363687    ...         5.5000     10.7500  0.00   4.50  0.735396   \n",
       "28   0.43  0.007167    ...         4.6700     10.0000  0.00   2.50  0.641229   \n",
       "29   1.00  0.583604    ...         1.6275      9.3300  0.00   3.49  0.635938   \n",
       "..    ...       ...    ...            ...         ...   ...    ...       ...   \n",
       "39   3.28  0.617479    ...        11.6700     19.7500  0.00   6.36  1.057729   \n",
       "40   3.28  0.517354    ...        10.5000     19.2500  0.00   7.00  1.354917   \n",
       "41   1.09  0.341938    ...         9.0000     17.2500  0.00   6.36  0.961167   \n",
       "42   1.00  0.498354    ...         8.5000     18.2500  0.00   7.85  0.869000   \n",
       "43   1.00  0.482500    ...         9.7500     22.0000  0.00   4.64  0.719812   \n",
       "44   4.72  0.555333    ...        13.7300     19.0000  0.00   5.10  0.892083   \n",
       "45   2.95  0.402833    ...        10.6275     14.2500  0.00   4.64  0.917354   \n",
       "46   1.92  0.366708    ...        11.3100     15.5425  0.00   6.18  1.039687   \n",
       "47   2.18  0.290479    ...        12.0000     14.8125  0.00   4.32  0.927375   \n",
       "48   4.50  0.312354    ...        12.0000     15.2500  0.00   6.00  0.882583   \n",
       "49   4.60  0.429667    ...        11.6700     15.5000  0.00   6.58  0.991125   \n",
       "50   1.66  0.460146    ...        11.2500     14.5000  0.00   4.50  0.795104   \n",
       "51   2.12  0.460562    ...         7.6275     12.0000  0.00   6.65  1.226271   \n",
       "52   2.12  0.440687    ...        12.6275     17.5000  0.00   6.85  0.977417   \n",
       "53   2.60  0.352875    ...        14.0000     16.6900  0.00   4.00  0.748479   \n",
       "54   2.17  0.419167    ...        12.7500     16.5000  0.00   3.77  0.702042   \n",
       "55   2.83  0.271271    ...        16.5000     21.0000  0.00   3.83  0.645458   \n",
       "56   4.50  0.346604    ...        11.0000     14.6700  0.00   5.91  1.155083   \n",
       "57  16.20  4.321021    ...        14.2500     18.5000  0.00   8.50  3.241958   \n",
       "58  12.68  4.223792    ...        14.2500     18.3300  0.00   9.39  3.288271   \n",
       "59  12.21  4.115750    ...        14.2375     18.2500  0.00  10.21  3.280021   \n",
       "60  12.48  4.396958    ...        13.7500     18.0000  0.00   8.01  3.261583   \n",
       "61  15.37  4.398833    ...        14.0000     18.2500  0.00   8.86  3.289542   \n",
       "62  17.24  4.354500    ...        14.3300     18.2500  0.00   9.42  3.479542   \n",
       "63  13.55  4.457896    ...        13.7500     18.0000  0.00   8.32  3.500750   \n",
       "64  14.67  4.576562    ...        13.7300     18.2500  0.00   8.32  3.259729   \n",
       "65  13.47  4.456333    ...        13.5000     17.7500  0.00   9.67  3.432563   \n",
       "66  12.47  4.371958    ...        14.0000     17.7500  0.00  10.00  3.338125   \n",
       "67  14.82  4.380583    ...        13.7500     18.0000  0.00   9.51  3.424646   \n",
       "68  13.86  4.359312    ...        13.7300     17.7500  0.43   9.00  3.340458   \n",
       "\n",
       "    median6      std6  1st_quart6  3rd_quart6  activity  \n",
       "0     0.430  0.513506      0.0000      0.9400  bending1  \n",
       "1     0.500  0.524317      0.0000      1.0000  bending1  \n",
       "2     0.430  0.389164      0.0000      0.5000  bending1  \n",
       "3     0.500  0.622534      0.4300      0.8700  bending1  \n",
       "4     0.490  0.487826      0.0000      0.8300  bending1  \n",
       "5     0.830  1.332980      0.4700      1.3000  bending2  \n",
       "6     0.710  0.481103      0.4700      0.9400  bending2  \n",
       "7     0.830  1.080842      0.4700      1.3000  bending2  \n",
       "8     0.940  0.831480      0.5000      1.3000  bending2  \n",
       "9     3.340  1.827769      2.1025      4.5500   cycling  \n",
       "10    2.690  1.629675      1.9125      4.0875   cycling  \n",
       "11    2.770  1.824534      1.7000      4.0375   cycling  \n",
       "12    2.590  1.569919      1.6400      3.6325   cycling  \n",
       "13    2.525  1.631380      1.6600      4.0300   cycling  \n",
       "14    2.590  1.637183      1.5800      3.7400   cycling  \n",
       "15    2.525  1.723094      1.5600      3.7700   cycling  \n",
       "16    2.870  1.769758      1.8850      4.2625   cycling  \n",
       "17    2.770  1.748326      1.7975      4.0600   cycling  \n",
       "18    2.930  1.626034      1.8900      4.0600   cycling  \n",
       "19    3.110  1.963685      2.1700      4.6175   cycling  \n",
       "20    2.500  1.852600      1.5000      3.9000   cycling  \n",
       "21    0.470  0.648403      0.0000      0.8300     lying  \n",
       "22    0.500  0.608399      0.0000      0.8300     lying  \n",
       "23    0.500  0.498889      0.4300      0.8700     lying  \n",
       "24    0.500  0.438442      0.4300      0.8300     lying  \n",
       "25    0.500  0.423435      0.4300      0.8300     lying  \n",
       "26    0.500  0.723953      0.4300      1.0000     lying  \n",
       "27    0.710  0.612834      0.4300      1.0000     lying  \n",
       "28    0.500  0.388372      0.4600      0.8300     lying  \n",
       "29    0.500  0.608399      0.0000      0.8300     lying  \n",
       "..      ...       ...         ...         ...       ...  \n",
       "39    0.830  1.025925      0.4700      1.3000   sitting  \n",
       "40    1.090  1.150883      0.5000      1.7000   sitting  \n",
       "41    0.820  0.882784      0.4700      1.2200   sitting  \n",
       "42    0.820  0.794213      0.4700      1.0000   sitting  \n",
       "43    0.500  0.608546      0.4300      0.8300   sitting  \n",
       "44    0.710  0.851175      0.4300      1.2200   sitting  \n",
       "45    0.830  0.709638      0.4700      1.1200  standing  \n",
       "46    0.830  0.916657      0.4700      1.2200  standing  \n",
       "47    0.830  0.756436      0.4700      1.2200  standing  \n",
       "48    0.830  0.668423      0.4700      1.1200  standing  \n",
       "49    0.830  0.855329      0.4700      1.2200  standing  \n",
       "50    0.820  0.503007      0.4700      1.0000  standing  \n",
       "51    1.090  0.891988      0.5000      1.5850  standing  \n",
       "52    0.830  0.853280      0.4700      1.2200  standing  \n",
       "53    0.820  0.461152      0.4300      0.9500  standing  \n",
       "54    0.500  0.567451      0.4300      0.9400  standing  \n",
       "55    0.500  0.567419      0.4300      0.8300  standing  \n",
       "56    0.940  0.842087      0.5000      1.5000  standing  \n",
       "57    3.015  1.769182      1.8850      4.4400   walking  \n",
       "58    3.270  1.647528      2.0500      4.3050   walking  \n",
       "59    3.015  1.700918      2.1200      4.5000   walking  \n",
       "60    2.980  1.617290      2.0500      4.3200   walking  \n",
       "61    3.015  1.680170      2.1200      4.2600   walking  \n",
       "62    3.270  1.761146      2.2400      4.5375   walking  \n",
       "63    3.285  1.692378      2.1800      4.5575   walking  \n",
       "64    3.110  1.640243      2.0500      4.3225   walking  \n",
       "65    3.200  1.732727      2.1575      4.5650   walking  \n",
       "66    3.080  1.656742      2.1600      4.3350   walking  \n",
       "67    3.270  1.690960      2.1700      4.5000   walking  \n",
       "68    3.090  1.699114      2.1200      4.3750   walking  \n",
       "\n",
       "[69 rows x 43 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newtrain = []\n",
    "for ds in train_data2:\n",
    "    df = ds[0]\n",
    "    stats = df.describe()\n",
    "    stats = stats.loc[['min','max','mean','50%','std','25%','75%']]\n",
    "    row = pd.Series()\n",
    "    for i in range(1, 7):\n",
    "        row['min'+str(i)] = stats.iloc[0,i]\n",
    "        row['max'+str(i)] = stats.iloc[1,i]\n",
    "        row['mean'+str(i)] = stats.iloc[2,i]\n",
    "        row['median'+str(i)] = stats.iloc[3,i]\n",
    "        row['std'+str(i)] = stats.iloc[4,i]\n",
    "        row['1st_quart'+str(i)] = stats.iloc[5,i]\n",
    "        row['3rd_quart'+str(i)] = stats.iloc[6,i]\n",
    "    row['activity'] = ds[1]\n",
    "    newtrain.append(row)\n",
    "    \n",
    "newtrain = pd.DataFrame(newtrain)\n",
    "newtrain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "newData = newtrain\n",
    "\n",
    "bending1 = newData.loc[newData['activity'] == 'bending1']\n",
    "bending2 = newData.loc[newData['activity'] == 'bending2']\n",
    "\n",
    "cycling = newData.loc[newData['activity'] == 'cycling']\n",
    "lying = newData.loc[newData['activity'] == 'lying']\n",
    "sitting = newData.loc[newData['activity'] == 'sitting']\n",
    "standing = newData.loc[newData['activity'] == 'standing']\n",
    "walking = newData.loc[newData['activity'] == 'walking']\n",
    "\n",
    "bending_all = bending1.append(bending2)\n",
    "#cycling + lying + sitting + standing + walking\n",
    "etc = cycling.append(lying)\n",
    "etc = etc.append(sitting)\n",
    "etc = etc.append(standing)\n",
    "etc = etc.append(walking)\n",
    "\n",
    "# Time Series 1\n",
    "min1_bending = list(bending_all['min1'])\n",
    "min1_etc = list(etc['min1'])\n",
    "\n",
    "max1_bending = list(bending_all['max1'])\n",
    "max1_etc = list(etc['max1'])    \n",
    "\n",
    "mean1_bending = list(bending_all['mean1'])\n",
    "mean1_etc = list(etc['mean1'])    \n",
    "\n",
    "# Time Series 2\n",
    "min2_bending = list(bending_all['min2'])\n",
    "min2_etc = list(etc['min2'])\n",
    "\n",
    "max2_bending = list(bending_all['max2'])\n",
    "max2_etc = list(etc['max2'])    \n",
    "\n",
    "mean2_bending = list(bending_all['mean2'])\n",
    "mean2_etc = list(etc['mean2'])    \n",
    "\n",
    "# Time Series 6\n",
    "min6_bending = list(bending_all['min6'])\n",
    "min6_etc = list(etc['min6'])\n",
    "\n",
    "max6_bending = list(bending_all['max6'])\n",
    "max6_etc = list(etc['max6'])    \n",
    "\n",
    "mean6_bending = list(bending_all['mean6'])\n",
    "mean6_etc = list(etc['mean6'])    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time Series 1: \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Time Series 1: \")\n",
    "plt.xlabel(\"min1\")\n",
    "plt.ylabel(\"max1\")\n",
    "plt.scatter(min1_bending, max1_bending, color = 'b', marker = 'o')\n",
    "plt.scatter(min1_etc, max1_etc, color = 'r', marker = 'o')\n",
    "plt.show()\n",
    "\n",
    "plt.xlabel(\"min1\")\n",
    "plt.ylabel(\"mean1\")\n",
    "plt.scatter(min1_bending, mean1_bending, color = 'b', marker = 'o')\n",
    "plt.scatter(min1_etc, mean1_etc, color = 'r', marker = 'o')\n",
    "plt.show()\n",
    "\n",
    "plt.xlabel(\"max1\")\n",
    "plt.ylabel(\"mean1\")\n",
    "plt.scatter(max1_bending, mean1_bending, color = 'b', marker = 'o')\n",
    "plt.scatter(max1_etc, mean1_etc, color = 'r', marker = 'o')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time Series 2: \n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYwAAAEKCAYAAAAB0GKPAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvIxREBQAAGjNJREFUeJzt3X+QHPV55/H3Z0fIsWRifm0IINAag3FwYjDeU5wCU2AICIWDXOyzpWwSfl0tRlCH7853RaIqm/KVqkIcX34YC2qxdYCzwTiO8VExxijEDiEG2ysiQGBAQmKNZIwWsMFGDkar5/7oXjQ7zKx6Vvudnh5/XlVT0/30d3oetXr32f71/SoiMDMz25u+shMwM7NqcMEwM7NCXDDMzKwQFwwzMyvEBcPMzApxwTAzs0JcMMzMrBAXDDMzK8QFw8zMCplXdgJz6ZBDDomBgYGy0zAzq4z169c/FxH9Rdr2VMEYGBhgbGys7DTMzCpD0njRtj4lZWZmhbhgmJlZIS4YZmZWSLJrGJLWAucCOyLi1/PYrcBxeZMDgB9HxIlNPvsU8BNgEtgVEYOp8jQzs2JSXvS+EbgWuHkqEBEfmpqW9CngxRk+f3pEPJcsOzMza0uyghER90gaaLZMkoAPAu9L9f1mZja3yrqG8V7g2YjY1GJ5AHdJWi9puIN5mZlZC2UVjBXALTMsPyUiTgLOAS6XdGqrhpKGJY1JGpuYmJjrPM32zegoDAxAX1/2PjpadkZms9bxgiFpHvB7wK2t2kTE9vx9B3AbsGSGtiMRMRgRg/39hR5WNOuM0VEYHobxcYjI3oeHXTSssso4wjgTeCwitjVbKGmhpP2npoGzgI0dzM9sbqxaBTt3To/t3JnFzSooWcGQdAtwH3CcpG2SLskXLafhdJSkwyXdkc8eCtwr6UHgO8BXI+LOVHmaJfP977cXN+tyKe+SWtEifmGT2A+AZfn0FuCEVHmZdcxRR2WnoZrFzSrIT3qbpbJ6NSxYMD22YEEWN6sgFwyzVIaGYGQEFi8GKXsfGcniZhXUU92bm3WdoSEXCOsZPsIwM7NCXDDMzKwQFwwzMyvEBcPMzApxwTBLyX1JWQ/xXVJmqUz1JTXVPchUX1LgO6esknyEYZaK+5KyHuOCYZaK+5KyHuOCYZZKqz6j3JeUVZQLhlkq7kvKeowLhlkq7kvKeozvkjJLyX1JWQ/xEYaZmRXigmGWkh/csx7iU1JmqfjBPesxPsIwS8UP7lmPccEwS8UP7lmPSVYwJK2VtEPSxrrY1ZK2S9qQv5a1+OxSSY9L2izpqlQ5miXlB/esx6Q8wrgRWNok/hcRcWL+uqNxoaQa8BngHOB4YIWk4xPmaZaGH9yzHpOsYETEPcALs/joEmBzRGyJiJ8DXwDOn9PkzDrBD+5ZjynjGsYVkh7KT1kd2GT5EcDTdfPb8piZmZWo0wXjOuCtwInAM8Cn9nWFkoYljUkam5iY2NfVmc2dqdtqx8chYs9ttX4WwyqqowUjIp6NiMmI2A3cQHb6qdF24Mi6+UV5rNU6RyJiMCIG+/v75zZhs33h22qtx3S0YEg6rG72PwEbmzT7LnCspLdImg8sB27vRH5mc2p8vL24WZdL9qS3pFuA04BDJG0DPg6cJulEIICngEvztocDn42IZRGxS9IVwNeBGrA2Ih5JladZMrUaTE42j5tVkCKi7BzmzODgYIyNjZWdhllGar2sh37urNokrY+IwSJt/aS3WSqLF7cXN+tyLhhmqfjBPesxLhhmqfjBPesx7t7cLCWPuGc9xEcYZmZWiAuGWUoecc96iE9JmaXiEfesx/gIwywVdw1iPcYFwywVj7hnPcYFwywVj7hnPcYFwyyVY45pL27W5VwwzFL55jfbi5t1ORcMs1Sa9VQ7U9ysy7lgmKXSqhtzd29uFeWCYZbK1DMXReNmXc4P7pmlsmZN9j4ykp2GqtWyYjEVN6sYH2GYpXTyybBoUdZb7aJF2bxZRfkIwywVdw1iPcZHGGapuGsQ6zEuGGapuGsQ6zHJCoaktZJ2SNpYF/ukpMckPSTpNkkHtPjsU5IelrRB0liqHM2SOuig9uJmXS7lEcaNwNKG2Drg1yPincATwB/P8PnTI+LEiBhMlJ9ZWq+80l7crMslKxgRcQ/wQkPsrojYlc/eDyxK9f1mpfvpT9uLm3W5Mq9hXAx8rcWyAO6StF6Sn3IyM+sCpdxWK2kVsAtoNV7lKRGxXdKvAOskPZYfsTRb1zAwDHCUu402M0um40cYki4EzgWGIiKatYmI7fn7DuA2YEmr9UXESEQMRsRgf39/gozNzAw6XDAkLQX+F3BeROxs0WahpP2npoGzgI3N2pqZWeekvK32FuA+4DhJ2yRdAlwL7E92mmmDpOvztodLuiP/6KHAvZIeBL4DfDUi7kyVp5mZFZPsGkZErGgS/lyLtj8AluXTW4ATUuVl1jF9fbB7d/O4WQV5zzVL5dJL24ubdTkXDLNU1qyBM86YHjvjDHdvbpXlgmGWyugo3Hff9Nh992VxswpywTBLxb3VWo9xwTBLxb3VWo9xwTBLpVXPA+6RwCrKBcMsldWrYcGC6bEFC7K4WQW5YJilMjQEF1wAtVo2X6tl8x6e1SrKBcMsldFRuOkmmJzM5icns3nfJWUV5YJhlorvkrIe44JhlorvkrIe44JhlorvkrIe44JhlsqyZe3FzbqcC4ZZKl/8Yntxsy7ngmGWyvPPtxc363IuGGZmVogLhlkqCxe2Fzfrci4YZmZWiAuGWSovv9xe3KzLuWCYmVkhSQuGpLWSdkjaWBc7SNI6SZvy9wNbfPaCvM0mSRekzNMsiYMPbi9u1uVSH2HcCCxtiF0F3B0RxwJ35/PTSDoI+Djwm8AS4OOtCotZ1/qrv4L586fH5s/P4mYVlLRgRMQ9wAsN4fOBm/Lpm4DfbfLRs4F1EfFCRPwIWMfrC49Zdxsa4t5L1rKttpjdiG21xdx7yVp3b26VVcY1jEMj4pl8+ofAoU3aHAE8XTe/LY+ZVcboKJx90xBHTj5Fjd0cOfkUZ9805N7NrbJKvegdEQHEvqxD0rCkMUljExMTc5SZ2b5btQrO3znKVgaYpI+tDHD+zlH3bm6VVUbBeFbSYQD5+44mbbYDR9bNL8pjrxMRIxExGBGD/f39c56s2WydPD7KDQwzwDh9BAOMcwPDnDzuQwyrphkLhqTfkHS/pKcljdRfeJb0nVl+5+3A1F1PFwD/r0mbrwNnSTow/86z8phZZVxTW8VCpg+gtJCdXFPzIYZV096OMK4DrgZ+A3gCuFfSW/Nl++1t5ZJuAe4DjpO0TdIlwJ8Cvy1pE3BmPo+kQUmfBYiIF4D/DXw3f30ij5lVxhGTzQdKahU363bz9rJ8/4i4M5/+c0nrgTsl/SEFrj1ExIoWi85o0nYM+C9182uBtXv7DrNupcVHwfh487hZBe31GoakN09NR8Q3gPcDnwcWJ8zLrPpWr4YFC6bHFizI4mYVtLeCcQ3wa/WBiHiI7Ajhy6mSMusJQ0MwMgKLF4OUvY+M+DkMqyxld7bupZH0SxHx7w2xQyLiuWSZzcLg4GCMjY2VnYaZWWVIWh8Rg0XaFr2t9ruS3lP3Be8HvjWb5MzMrJr2dtF7yu8DayV9EzgcOBh4X6qkzMys+xQqGBHxsKTVZBe7fwKcGhHbkmZmZmZdpVDBkPQ54K3AO4G3Af8g6dMR8ZmUyZmZWfcoeg3jYeD0iNgaEV8n63b8pHRpmfWI0VEYGIC+vuzdPQ9ahRU9JfWXDfMvApckycisV4yOwkUXwauvZvPj49k8+NZaq6RCRxiSjpX0JUmPStoy9UqdnFmlXXnlnmIx5dVXs7hZBRU9JfV/yfqV2gWcDtwM/E2qpMx6wvPPtxc363JFC8YbI+Jusgf9xiPiauB30qVlZmbdpuhzGK9I6gM2SbqCbGyKN6VLy8zMuk3RI4wrgQXAfwXeDfwB8EepkjLrCX0tfrxaxc26XNE9N8ge2rsdGCR7FuOGVEmZ9YRLL20vbtblip6SGgX+J9nzGLvTpWPWQ9asyd5HRmByEmo1GB7eEzermKIFYyIibk+aiVkvWrPGBcJ6RtGC8fF8+NS7gVemghHhMTHMzH5BFC0YFwFvJxvHe+qUVOBBlMzMfmEULRj/ISKOS5qJmZl1taJ3SX1L0vFz8YWSjpO0oe71kqSPNLQ5TdKLdW0+NhffbWZms1f0COM9wAZJW8muYQiIiHhnu18YEY8DJwJIqpE9BHhbk6b/EhHntrt+MzNLo2jBWJro+88AnoyI8UTrNzOzOVK0e/NUv9CXA7e0WPZbkh4EfgB8NCIeSZSDmZkVUFofBZLmA+cBf9dk8QPA4og4Afg08JUZ1jMsaUzS2MTERJpkzcysvIIBnAM8EBHPNi6IiJci4qf59B3AfpIOabaSiBiJiMGIGOzv70+bsZnZL7AyC8YKWpyOkvSrkpRPLyHL04MImJmVqOhF7zklaSHw28CldbEPA0TE9cAHgMsk7QJ+BiyPiCgjVzMzy5RSMCLiZeDghtj1ddPXAtd2Oi8zM2vNHfObmVkhLhhmZlaIC4aZmRXigmFmZoW4YJgltHIlzJsHUva+cmXZGZnNXil3SZn9Ili5Eq67bs/85OSeeQ/CZ1XkIwyzREZG2oubdTsXDLNEJifbi5t1OxcMs0RqNVjBKFsZYJI+tjLACkap1crOzGx2fA3DLJGR00b50N3DLGQnAAOMcwPDnHkawFCZqZnNio8wzBK5ePOq14rFlIXs5OLNq0rKyGzfuGCYpfL977cXN+tyLhhmqRx1VHtxsy7ngmGWyurVsGDB9NiCBVncrIJcMMxSGRrKHrpYvDh71Hvx4mx+yBe8rZp8l5RZSkNDLhDWM3yEYWZmhbhgmJlZIS4YZmZWiAuGmZkVUlrBkPSUpIclbZA01mS5JP21pM2SHpJ0Uhl5mplZpuy7pE6PiOdaLDsHODZ//SZwXf5uZmYl6OZTUucDN0fmfuAASYeVnZRZW0ZHYWAA+vqy99HRsjMym7UyC0YAd0laL2m4yfIjgKfr5rflsWkkDUsakzQ2MTGRKFWzWRgdheFhGB+HiOx9eNhFwyqrzIJxSkScRHbq6XJJp85mJRExEhGDETHY398/txma7YtVq2Dn9N5q2bkzi5tVUGkFIyK25+87gNuAJQ1NtgNH1s0vymNm1TA+3l7crMuVUjAkLZS0/9Q0cBawsaHZ7cAf5XdLvQd4MSKe6XCqZrMntRc363Jl3SV1KHCbsh+cecDfRsSdkj4MEBHXA3cAy4DNwE7gopJyNZudiPbiZl2ulIIREVuAE5rEr6+bDuDyTuZlZmatdfNttWZm1kVcMMxS6Wvx49UqbtblvOeapXLppe3Fzbpc2V2DmPWuNWuy95ERmJyEWi17cG8qblYxLhhmKa1Z4wJhPcOnpMzMrBAXDDMzK8QFw8zMCnHBMDOzQlwwzMysEBcMMzMrxAXDLKWVK2HevKyH2nnzsnmzivJzGGaprFwJ1123Z35ycs+8n82wCvIRhlkqIyPtxc26nAuGWSqTk+3FzbqcC4ZZKrVae3GzLueCYZbI9uNOo3FsvcjjZlXkgmGWSDy+mcbRu5XHzarIBcMskcMnx9uKm3U7FwyzRHbT/FpFq7hZt+t4wZB0pKRvSHpU0iOSrmzS5jRJL0rakL8+1uk8zfZVjeZ3Q7WKm3W7Mh7c2wX8j4h4QNL+wHpJ6yLi0YZ2/xIR55aQn9mcmKTGvCbFIYubVU/HjzAi4pmIeCCf/gnwPeCITudhlpqPMKzXlHoNQ9IA8C7g200W/5akByV9TdI7ZljHsKQxSWMTExOJMjVrn1o8b9EqbtbtSisYkt4E/D3wkYh4qWHxA8DiiDgB+DTwlVbriYiRiBiMiMH+/v50CZu1y096W48ppWBI2o+sWIxGxJcbl0fESxHx03z6DmA/SYd0OE2zfbNwYXtxsy5Xxl1SAj4HfC8i/k+LNr+at0PSErI8n+9clmZz4OWX24ubdbkybtY4GfhD4GFJG/LYnwBHAUTE9cAHgMsk7QJ+BiyPiMZeFszMrIM6XjAi4l54XY8JjW2uBa7tTEZmZlaEn/Q2M7NCXDDMzKwQFwyzRFpddPPFOKsqFwwzMyvEBcPMzApxwTBLJFrcDNgqbtbtXDDMkvFVDOstLhhmiWzvW9xW3KzbuWCYJdL39mNedywRedysijyOi1kiR3zvn14XU4u4WRX4CMMskVbdn7lbNKsqFwwzMyvEBcPMzApxwTAzs0JcMMwSeXW/Nza9S+rV/d5YRjpm+8wFwyyR+T/fyW76CHjttZs+5v98Z8mZmc2OC4ZZKitXUmM3gtdeNXbDypUlJ2Y2Oy4YZqmMjLQXN+tyLhhmqUxOthc363IuGGap1Grtxc26XCkFQ9JSSY9L2izpqibL3yDp1nz5tyUNdD5Ls300PNxe3KzLdbxgSKoBnwHOAY4HVkg6vqHZJcCPIuIY4C+AazqbpdkcWLMGLrtszxFFrZbNr1lTbl5ms1TGEcYSYHNEbImInwNfAM5vaHM+cFM+/SXgDEkedcaqZ80a2LULIrJ3FwursDIKxhHA03Xz2/JY0zYRsQt4ETi42cokDUsakzQ2MTGRIF0zM4MeuOgdESMRMRgRg/39/WWnY2bWs8ooGNuBI+vmF+Wxpm0kzQPeDDzfkezMzKypMgrGd4FjJb1F0nxgOXB7Q5vbgQvy6Q8A/xQeRMDMrFQdH3EvInZJugL4OlAD1kbEI5I+AYxFxO3A54DPS9oMvEBWVMzMrESlDNEaEXcAdzTEPlY3/e/Af+50XmZm1lrlL3qbmVlnqJcuDUiaAMbLzmMGhwDPlZ1EAVXJE6qTq/Oce1XJtdvzXBwRhW4x7amC0e0kjUXEYNl57E1V8oTq5Oo8515Vcq1KnkX4lJSZmRXigmFmZoW4YHRWVUbOqUqeUJ1cnefcq0quVclzr3wNw8zMCvERhpmZFeKCMQuSDpK0TtKm/P3AFu0uyNtsknRBXfzdkh7OB4j666mu2/NBozbkr6ckbcjjA5J+Vrfs+i7I9WpJ2+tyWlb3mT/O2z8u6eyS8/ykpMckPSTpNkkH5PG2tum+DPrVanu0Wmfebc638/iteRc6hc11rpKOlPQNSY9KekTSlXXtW+4Hnc4zjz+V7wcbJI3VxQvtX53KVdJxddtsg6SXJH0kXzbrbZpcRPjV5gv4M+CqfPoq4JombQ4CtuTvB+bTB+bLvgO8BxDwNeCcJp//FPCxfHoA2NhNuQJXAx9tsq7jgQeBNwBvAZ4EaiXmeRYwL5++Zmq97WxTsi5sngSOBubn/77jG9qsBK7Pp5cDt860PWZaJ/BFYHk+fT1wWRv/3ylyPQw4KW+zP/BEXa5N94My8syXPQUcMpv9q9O5Nqz/h2TPQ8x6m3bi5SOM2akf4Okm4HebtDkbWBcRL0TEj4B1wFJJhwG/HBH3R7Z33Nz4+fyv4w8Ct3R7ri2+7wsR8UpEbAU2kw2aVUqeEXFXZGOqANxP1jtyu/Zl0K9W26PpOvPPvC9fx0zbomO5RsQzEfEAQET8BPgerx/Dpl0ptulMiuxfZeV6BvBkRHTzQ8eAT0nN1qER8Uw+/UPg0CZtWg0UdUQ+3Riv917g2YjYVBd7i6R/k/TPkt7bJblekZ/qWVt3iF9kgKxO5znlYrKjjylFt+m+DPo1U87N4gcDP64rckW3X8pcX5OfankX8O26cLP9oKw8A7hL0npJ9YOnF9m/Op3rlOW8/o/D2WzT5FwwWpD0j5I2NnlN+8si/4t2rm81W8H0HegZ4KiIeBfw34G/lfTLJed6HfBW4MQ8v0/t7QNlblNJq4BdwGgemnGb2utJehPw98BHIuKlPNz2fpDYKRFxEnAOcLmkUxsbJPqZnRVl16fOA/6uLtxt2/Q1pfRWWwURcWarZZKelXRYRDyTnw7Z0aTZduC0uvlFwDfz+KKG+GsDSCkbMOr3gHfX5fIK8Eo+vV7Sk8DbgLGyco2IZ+u+4wbgH+rW1XSArBK36YXAucAZ+S+LvW7TJt9bdNCvbZo+6NdMn20Wfx44QNK8/C/VZt81kyS5StqPrFiMRsSXpxrMsB+UkmdETL3vkHQb2emfe4Ai+1dHc82dAzxQvx33YZumV/ZFlCq+gE8y/QLanzVpcxCwlezi7IH59EH5ssYLtMvqPrcU+OeGdfWz56Le0WQ73EFl5gocVvf5/0Z2nhbgHUy/yLeFYhe9U+W5FHgU6J/tNiX7w2pL/u+Zuuj5joY2lzP9oucXZ9oeM62T7K/N+oveK9vYN1PkKrLrQn/Z5Pua7gcl5bkQ2D9vsxD4FrC06P7VyVzrPvcF4KK52KadeJWeQBVfZOcm7wY2Af/Inl9ag8Bn69pdTHaRa3P9TpG320h2x8S15A9Q5stuBD7c8H3vBx4BNgAPAP+x7FyBzwMPAw+RjZBYv5Ovyts/TpM7wDqc52ayc8gb8tfUD3Vb2xRYRnZ30JPAqjz2CeC8fPqXyH7RbyYrXkfvbXs0W2cePzpfx+Z8nW9oc/+c01yBU8hO4TxUtx2nCnLL/aCEPI8m++X8YP5/W79Nm+5fZeWaxxeSHYW8ueG7Zr1NU7/8pLeZmRXii95mZlaIC4aZmRXigmFmZoW4YJiZWSEuGGZmVogLhlkiks5r1rNpQ5sTJd2nrBfYhyR9qFP5mbXLt9WalUjS28h6q9gk6XBgPfBrEfHjklMzex0fYZjNgrLxNB6TdKOkJySNSjpT0r8qG3NhiaQLJV2bt79R2Tgd35K0RdIHACLiicg7mYyIH5B1WdFf3r/MrDUXDLPZO4asY7i356/fJ3sq+qPAnzRpf1i+/FzgTxsXSlpC1vXEk4nyNdsn7nzQbPa2RsTDAJIeAe6OiJD0MNkATY2+EhG7gUclTeteO+8Q7/PABXkbs67jIwyz2Xulbnp33fxumv8xVt9er01k3ap/layPovvnOkmzueKCYVaifDyE24CbI+JLe2tvViYXDLNyfRA4FbhQ0ob8dWLZSZk149tqzcysEB9hmJlZIS4YZmZWiAuGmZkV4oJhZmaFuGCYmVkhLhhmZlaIC4aZmRXigmFmZoX8f2uSnLk4J2/6AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Time Series 2: \")\n",
    "plt.xlabel(\"min2\")\n",
    "plt.ylabel(\"max2\")\n",
    "plt.scatter(min2_bending, max2_bending, color = 'b', marker = 'o')\n",
    "plt.scatter(min2_etc, max2_etc, color = 'r', marker = 'o')\n",
    "plt.show()\n",
    "\n",
    "plt.xlabel(\"min2\")\n",
    "plt.ylabel(\"mean2\")\n",
    "plt.scatter(min2_bending, mean1_bending, color = 'b', marker = 'o')\n",
    "plt.scatter(min2_etc, mean1_etc, color = 'r', marker = 'o')\n",
    "plt.show()\n",
    "\n",
    "plt.xlabel(\"max2\")\n",
    "plt.ylabel(\"mean2\")\n",
    "plt.scatter(max2_bending, mean2_bending, color = 'b', marker = 'o')\n",
    "plt.scatter(max2_etc, mean2_etc, color = 'r', marker = 'o')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time Series 6: \n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Time Series 6: \")\n",
    "plt.xlabel(\"min6\")\n",
    "plt.ylabel(\"max6\")\n",
    "plt.scatter(min6_bending, max6_bending, color = 'b', marker = 'o')\n",
    "plt.scatter(min6_etc, max6_etc, color = 'r', marker = 'o')\n",
    "plt.show()\n",
    "\n",
    "plt.xlabel(\"min6\")\n",
    "plt.ylabel(\"mean6\")\n",
    "plt.scatter(min6_bending, mean6_bending, color = 'b', marker = 'o')\n",
    "plt.scatter(min6_etc, mean6_etc, color = 'r', marker = 'o')\n",
    "plt.show()\n",
    "\n",
    "plt.xlabel(\"max6\")\n",
    "plt.ylabel(\"mean6\")\n",
    "plt.scatter(max6_bending, mean6_bending, color = 'b', marker = 'o')\n",
    "plt.scatter(max6_etc, mean6_etc, color = 'r', marker = 'o')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def data_time_domain(dataframe): \n",
    "    newtrain = []\n",
    "    for ds in dataframe:\n",
    "        df = ds[0]\n",
    "        stats = df.describe()\n",
    "        stats = stats.loc[['min','max','mean','50%','std','25%','75%']]\n",
    "        row = pd.Series()\n",
    "        for i in range(1, 7):\n",
    "            row['min'+str(i)] = stats.iloc[0,i]\n",
    "            row['max'+str(i)] = stats.iloc[1,i]\n",
    "            row['mean'+str(i)] = stats.iloc[2,i]\n",
    "            row['median'+str(i)] = stats.iloc[3,i]\n",
    "            row['std'+str(i)] = stats.iloc[4,i]\n",
    "            row['1st_quart'+str(i)] = stats.iloc[5,i]\n",
    "            row['3rd_quart'+str(i)] = stats.iloc[6,i]\n",
    "        row['activity'] = ds[1]\n",
    "        newtrain.append(row)\n",
    "    newtrain = pd.DataFrame(newtrain)\n",
    "    return newtrain\n",
    "\n",
    "\n",
    "original_train = data_time_domain(train_data2)\n",
    "original_test = data_time_domain(test_data2)\n",
    "# encode into 0 or 1 \n",
    "original_train['bending'] = np.where(np.logical_or((original_train.activity == 'bending1'), (original_train.activity == 'bending2')), 0, 1) \n",
    "original_train_binary = original_train.drop('activity', axis = 1)\n",
    "# split the dataset into feature vector and a label vector \n",
    "x_train = pd.DataFrame(original_train_binary, columns = original_train_binary.columns[:-1])\n",
    "y_train = original_train_binary['bending']\n",
    "\n",
    "\n",
    "# encode into 0 or 1 \n",
    "original_test['bending'] = np.where(np.logical_or((original_test.activity == 'bending1'), (original_test.activity == 'bending2')), 0, 1) \n",
    "original_test_binary = original_test.drop('activity', axis = 1)\n",
    "# split the dataset into feature vector and a label vector \n",
    "x_test = pd.DataFrame(original_test_binary, columns = original_test_binary.columns[:-1])\n",
    "y_test = original_test_binary['bending']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 1.0\n",
      "Confusion matrix:\n",
      "[[ 4  0]\n",
      " [ 0 15]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00         4\n",
      "           1       1.00      1.00      1.00        15\n",
      "\n",
      "   micro avg       1.00      1.00      1.00        19\n",
      "   macro avg       1.00      1.00      1.00        19\n",
      "weighted avg       1.00      1.00      1.00        19\n",
      "\n"
     ]
    }
   ],
   "source": [
    "logisticRegr = LogisticRegression()\n",
    "logisticRegr.fit(x_train, y_train)\n",
    "score = logisticRegr.score(x_test, y_test)\n",
    "print(\"Accuracy: \" + str(score))\n",
    "y_pred = logisticRegr.predict(x_test)\n",
    "print(\"Confusion matrix:\")\n",
    "print(confusion_matrix(y_test, y_pred))\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ii. Break each time series in your training set into two (approximately) equal length time series. Now instead of 6 time series for each of the 88 instances, you have 12 time series for each instance. Repeat the experiment in 1(d)i. Do you see any considerable difference in the results with those of 1(d)i?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>min1</th>\n",
       "      <th>max1</th>\n",
       "      <th>mean1</th>\n",
       "      <th>median1</th>\n",
       "      <th>std1</th>\n",
       "      <th>1st_quart1</th>\n",
       "      <th>3rd_quart1</th>\n",
       "      <th>min2</th>\n",
       "      <th>max2</th>\n",
       "      <th>mean2</th>\n",
       "      <th>...</th>\n",
       "      <th>1st_quart5</th>\n",
       "      <th>3rd_quart5</th>\n",
       "      <th>min6</th>\n",
       "      <th>max6</th>\n",
       "      <th>mean6</th>\n",
       "      <th>median6</th>\n",
       "      <th>std6</th>\n",
       "      <th>1st_quart6</th>\n",
       "      <th>3rd_quart6</th>\n",
       "      <th>activity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>36.50</td>\n",
       "      <td>46.50</td>\n",
       "      <td>44.057167</td>\n",
       "      <td>44.500</td>\n",
       "      <td>1.556971</td>\n",
       "      <td>43.2500</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.50</td>\n",
       "      <td>0.381042</td>\n",
       "      <td>...</td>\n",
       "      <td>36.0000</td>\n",
       "      <td>37.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.79</td>\n",
       "      <td>0.598250</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.526656</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>35.00</td>\n",
       "      <td>47.40</td>\n",
       "      <td>43.851833</td>\n",
       "      <td>43.500</td>\n",
       "      <td>1.557168</td>\n",
       "      <td>43.0000</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.70</td>\n",
       "      <td>0.471458</td>\n",
       "      <td>...</td>\n",
       "      <td>33.0000</td>\n",
       "      <td>36.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.50</td>\n",
       "      <td>0.388333</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.478528</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.7100</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>33.75</td>\n",
       "      <td>47.75</td>\n",
       "      <td>43.278875</td>\n",
       "      <td>45.000</td>\n",
       "      <td>3.473355</td>\n",
       "      <td>42.0000</td>\n",
       "      <td>45.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>0.673292</td>\n",
       "      <td>...</td>\n",
       "      <td>36.0000</td>\n",
       "      <td>37.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.53</td>\n",
       "      <td>0.640958</td>\n",
       "      <td>0.765</td>\n",
       "      <td>0.554542</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1.2200</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33.00</td>\n",
       "      <td>46.00</td>\n",
       "      <td>41.080750</td>\n",
       "      <td>42.000</td>\n",
       "      <td>3.537481</td>\n",
       "      <td>37.7500</td>\n",
       "      <td>44.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.86</td>\n",
       "      <td>0.718792</td>\n",
       "      <td>...</td>\n",
       "      <td>28.7500</td>\n",
       "      <td>33.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.586083</td>\n",
       "      <td>0.470</td>\n",
       "      <td>0.491873</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.8700</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>33.00</td>\n",
       "      <td>45.75</td>\n",
       "      <td>41.621208</td>\n",
       "      <td>42.330</td>\n",
       "      <td>3.118644</td>\n",
       "      <td>39.6525</td>\n",
       "      <td>44.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.83</td>\n",
       "      <td>0.623083</td>\n",
       "      <td>...</td>\n",
       "      <td>28.5000</td>\n",
       "      <td>31.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.79</td>\n",
       "      <td>0.419083</td>\n",
       "      <td>0.430</td>\n",
       "      <td>0.411200</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.7100</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>39.25</td>\n",
       "      <td>43.67</td>\n",
       "      <td>41.734917</td>\n",
       "      <td>41.500</td>\n",
       "      <td>0.595920</td>\n",
       "      <td>41.5000</td>\n",
       "      <td>42.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.12</td>\n",
       "      <td>0.448875</td>\n",
       "      <td>...</td>\n",
       "      <td>28.3100</td>\n",
       "      <td>30.5625</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.50</td>\n",
       "      <td>0.347500</td>\n",
       "      <td>0.430</td>\n",
       "      <td>0.363144</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.5000</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>39.00</td>\n",
       "      <td>48.00</td>\n",
       "      <td>44.117042</td>\n",
       "      <td>45.000</td>\n",
       "      <td>1.359836</td>\n",
       "      <td>43.5000</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.30</td>\n",
       "      <td>0.250042</td>\n",
       "      <td>...</td>\n",
       "      <td>21.7500</td>\n",
       "      <td>24.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.26</td>\n",
       "      <td>0.815417</td>\n",
       "      <td>0.710</td>\n",
       "      <td>0.718016</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>1.1200</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>37.00</td>\n",
       "      <td>46.50</td>\n",
       "      <td>42.792875</td>\n",
       "      <td>42.670</td>\n",
       "      <td>1.058792</td>\n",
       "      <td>42.5000</td>\n",
       "      <td>43.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.58</td>\n",
       "      <td>0.506125</td>\n",
       "      <td>...</td>\n",
       "      <td>22.5000</td>\n",
       "      <td>23.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.06</td>\n",
       "      <td>0.543875</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.473445</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>0.7100</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>36.67</td>\n",
       "      <td>45.00</td>\n",
       "      <td>43.486208</td>\n",
       "      <td>43.710</td>\n",
       "      <td>1.281976</td>\n",
       "      <td>42.3300</td>\n",
       "      <td>44.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.30</td>\n",
       "      <td>0.378667</td>\n",
       "      <td>...</td>\n",
       "      <td>19.2500</td>\n",
       "      <td>24.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.28</td>\n",
       "      <td>0.524875</td>\n",
       "      <td>0.470</td>\n",
       "      <td>0.486847</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.8300</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>36.25</td>\n",
       "      <td>48.00</td>\n",
       "      <td>44.452042</td>\n",
       "      <td>44.500</td>\n",
       "      <td>1.771251</td>\n",
       "      <td>44.2500</td>\n",
       "      <td>44.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.50</td>\n",
       "      <td>0.447583</td>\n",
       "      <td>...</td>\n",
       "      <td>21.0000</td>\n",
       "      <td>23.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.96</td>\n",
       "      <td>0.585750</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.487918</td>\n",
       "      <td>0.4225</td>\n",
       "      <td>0.8300</td>\n",
       "      <td>bending1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>21.00</td>\n",
       "      <td>50.00</td>\n",
       "      <td>32.014375</td>\n",
       "      <td>26.125</td>\n",
       "      <td>8.743464</td>\n",
       "      <td>24.7300</td>\n",
       "      <td>42.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.90</td>\n",
       "      <td>0.587875</td>\n",
       "      <td>...</td>\n",
       "      <td>18.4575</td>\n",
       "      <td>27.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>13.61</td>\n",
       "      <td>1.538042</td>\n",
       "      <td>1.045</td>\n",
       "      <td>1.639122</td>\n",
       "      <td>0.5000</td>\n",
       "      <td>2.0500</td>\n",
       "      <td>bending2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>27.00</td>\n",
       "      <td>36.00</td>\n",
       "      <td>33.158042</td>\n",
       "      <td>33.000</td>\n",
       "      <td>0.941701</td>\n",
       "      <td>33.0000</td>\n",
       "      <td>33.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.87</td>\n",
       "      <td>0.444375</td>\n",
       "      <td>...</td>\n",
       "      <td>16.9375</td>\n",
       "      <td>20.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.02</td>\n",
       "      <td>0.786042</td>\n",
       "      <td>0.710</td>\n",
       "      <td>0.768408</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>0.9400</td>\n",
       "      <td>bending2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>29.00</td>\n",
       "      <td>33.00</td>\n",
       "      <td>30.712417</td>\n",
       "      <td>30.290</td>\n",
       "      <td>0.937965</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>31.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.298958</td>\n",
       "      <td>...</td>\n",
       "      <td>16.3300</td>\n",
       "      <td>18.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.40</td>\n",
       "      <td>0.725333</td>\n",
       "      <td>0.710</td>\n",
       "      <td>0.599116</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>0.9400</td>\n",
       "      <td>bending2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>27.50</td>\n",
       "      <td>30.00</td>\n",
       "      <td>29.051458</td>\n",
       "      <td>29.000</td>\n",
       "      <td>0.635067</td>\n",
       "      <td>28.6700</td>\n",
       "      <td>29.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.87</td>\n",
       "      <td>0.213917</td>\n",
       "      <td>...</td>\n",
       "      <td>17.3300</td>\n",
       "      <td>19.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.50</td>\n",
       "      <td>0.677917</td>\n",
       "      <td>0.710</td>\n",
       "      <td>0.322210</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>0.9400</td>\n",
       "      <td>bending2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>19.00</td>\n",
       "      <td>39.25</td>\n",
       "      <td>29.189875</td>\n",
       "      <td>27.000</td>\n",
       "      <td>6.216895</td>\n",
       "      <td>25.9375</td>\n",
       "      <td>36.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.33</td>\n",
       "      <td>0.497042</td>\n",
       "      <td>...</td>\n",
       "      <td>16.4575</td>\n",
       "      <td>20.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.73</td>\n",
       "      <td>1.099792</td>\n",
       "      <td>0.820</td>\n",
       "      <td>1.161161</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.2200</td>\n",
       "      <td>bending2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>20.00</td>\n",
       "      <td>45.50</td>\n",
       "      <td>32.686333</td>\n",
       "      <td>30.000</td>\n",
       "      <td>8.576204</td>\n",
       "      <td>27.0000</td>\n",
       "      <td>42.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.40</td>\n",
       "      <td>0.437292</td>\n",
       "      <td>...</td>\n",
       "      <td>14.4575</td>\n",
       "      <td>25.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.61</td>\n",
       "      <td>1.114917</td>\n",
       "      <td>0.870</td>\n",
       "      <td>0.996452</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.3000</td>\n",
       "      <td>bending2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>25.00</td>\n",
       "      <td>47.50</td>\n",
       "      <td>34.110625</td>\n",
       "      <td>30.500</td>\n",
       "      <td>5.097232</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>39.3725</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.38</td>\n",
       "      <td>0.528500</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0000</td>\n",
       "      <td>26.3125</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.71</td>\n",
       "      <td>0.996250</td>\n",
       "      <td>0.830</td>\n",
       "      <td>0.813779</td>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.2500</td>\n",
       "      <td>bending2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>25.00</td>\n",
       "      <td>33.00</td>\n",
       "      <td>28.005875</td>\n",
       "      <td>27.585</td>\n",
       "      <td>1.434469</td>\n",
       "      <td>27.0000</td>\n",
       "      <td>29.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.282417</td>\n",
       "      <td>...</td>\n",
       "      <td>8.3300</td>\n",
       "      <td>13.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.92</td>\n",
       "      <td>1.199958</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.838177</td>\n",
       "      <td>0.7100</td>\n",
       "      <td>1.4100</td>\n",
       "      <td>bending2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>26.00</td>\n",
       "      <td>44.00</td>\n",
       "      <td>36.183208</td>\n",
       "      <td>35.750</td>\n",
       "      <td>3.324873</td>\n",
       "      <td>34.0000</td>\n",
       "      <td>38.8125</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.65</td>\n",
       "      <td>2.753583</td>\n",
       "      <td>...</td>\n",
       "      <td>13.6275</td>\n",
       "      <td>17.5425</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.98</td>\n",
       "      <td>3.486042</td>\n",
       "      <td>3.320</td>\n",
       "      <td>1.797080</td>\n",
       "      <td>2.1500</td>\n",
       "      <td>4.5525</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19.00</td>\n",
       "      <td>44.00</td>\n",
       "      <td>36.273583</td>\n",
       "      <td>36.000</td>\n",
       "      <td>3.727665</td>\n",
       "      <td>33.7500</td>\n",
       "      <td>39.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>12.28</td>\n",
       "      <td>2.909792</td>\n",
       "      <td>...</td>\n",
       "      <td>14.1500</td>\n",
       "      <td>18.6700</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.61</td>\n",
       "      <td>3.475333</td>\n",
       "      <td>3.340</td>\n",
       "      <td>1.861694</td>\n",
       "      <td>2.0500</td>\n",
       "      <td>4.5075</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>28.00</td>\n",
       "      <td>43.33</td>\n",
       "      <td>36.517542</td>\n",
       "      <td>36.000</td>\n",
       "      <td>3.305618</td>\n",
       "      <td>34.2500</td>\n",
       "      <td>39.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10.85</td>\n",
       "      <td>2.874625</td>\n",
       "      <td>...</td>\n",
       "      <td>13.9375</td>\n",
       "      <td>17.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.89</td>\n",
       "      <td>3.138583</td>\n",
       "      <td>2.865</td>\n",
       "      <td>1.591958</td>\n",
       "      <td>2.0375</td>\n",
       "      <td>4.4550</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>26.50</td>\n",
       "      <td>44.33</td>\n",
       "      <td>36.857042</td>\n",
       "      <td>36.000</td>\n",
       "      <td>3.739054</td>\n",
       "      <td>34.5000</td>\n",
       "      <td>39.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>12.89</td>\n",
       "      <td>3.071458</td>\n",
       "      <td>...</td>\n",
       "      <td>15.7500</td>\n",
       "      <td>19.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.19</td>\n",
       "      <td>3.008042</td>\n",
       "      <td>2.680</td>\n",
       "      <td>1.667305</td>\n",
       "      <td>1.8525</td>\n",
       "      <td>3.8150</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>27.80</td>\n",
       "      <td>44.67</td>\n",
       "      <td>37.069917</td>\n",
       "      <td>36.250</td>\n",
       "      <td>3.822253</td>\n",
       "      <td>34.5000</td>\n",
       "      <td>40.2700</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10.50</td>\n",
       "      <td>2.792250</td>\n",
       "      <td>...</td>\n",
       "      <td>14.5000</td>\n",
       "      <td>18.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.32</td>\n",
       "      <td>2.908667</td>\n",
       "      <td>2.525</td>\n",
       "      <td>1.719806</td>\n",
       "      <td>1.7000</td>\n",
       "      <td>3.7700</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>25.33</td>\n",
       "      <td>45.00</td>\n",
       "      <td>37.158708</td>\n",
       "      <td>36.250</td>\n",
       "      <td>3.602490</td>\n",
       "      <td>35.0000</td>\n",
       "      <td>40.0625</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10.84</td>\n",
       "      <td>2.667750</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0000</td>\n",
       "      <td>18.8125</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.50</td>\n",
       "      <td>3.244042</td>\n",
       "      <td>2.905</td>\n",
       "      <td>1.912478</td>\n",
       "      <td>1.7975</td>\n",
       "      <td>4.4250</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>26.75</td>\n",
       "      <td>44.50</td>\n",
       "      <td>36.830792</td>\n",
       "      <td>36.330</td>\n",
       "      <td>3.663132</td>\n",
       "      <td>34.6700</td>\n",
       "      <td>39.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>11.68</td>\n",
       "      <td>2.838500</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0000</td>\n",
       "      <td>18.6900</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.81</td>\n",
       "      <td>2.970083</td>\n",
       "      <td>2.650</td>\n",
       "      <td>1.686158</td>\n",
       "      <td>1.7000</td>\n",
       "      <td>3.8475</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>27.33</td>\n",
       "      <td>44.75</td>\n",
       "      <td>36.895958</td>\n",
       "      <td>36.250</td>\n",
       "      <td>3.452460</td>\n",
       "      <td>34.4750</td>\n",
       "      <td>39.8125</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10.50</td>\n",
       "      <td>2.676125</td>\n",
       "      <td>...</td>\n",
       "      <td>15.4575</td>\n",
       "      <td>18.6700</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.44</td>\n",
       "      <td>2.576542</td>\n",
       "      <td>2.520</td>\n",
       "      <td>1.420814</td>\n",
       "      <td>1.5000</td>\n",
       "      <td>3.4150</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>26.25</td>\n",
       "      <td>43.40</td>\n",
       "      <td>36.865417</td>\n",
       "      <td>36.250</td>\n",
       "      <td>3.462793</td>\n",
       "      <td>34.3100</td>\n",
       "      <td>40.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.46</td>\n",
       "      <td>2.387250</td>\n",
       "      <td>...</td>\n",
       "      <td>13.7500</td>\n",
       "      <td>18.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.26</td>\n",
       "      <td>2.964792</td>\n",
       "      <td>2.500</td>\n",
       "      <td>1.655499</td>\n",
       "      <td>1.6550</td>\n",
       "      <td>4.0375</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>29.25</td>\n",
       "      <td>44.25</td>\n",
       "      <td>37.049500</td>\n",
       "      <td>36.415</td>\n",
       "      <td>3.411449</td>\n",
       "      <td>34.5000</td>\n",
       "      <td>40.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.64</td>\n",
       "      <td>2.452917</td>\n",
       "      <td>...</td>\n",
       "      <td>14.3300</td>\n",
       "      <td>18.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.34</td>\n",
       "      <td>2.904458</td>\n",
       "      <td>2.570</td>\n",
       "      <td>1.609793</td>\n",
       "      <td>1.6900</td>\n",
       "      <td>3.7700</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>27.75</td>\n",
       "      <td>44.00</td>\n",
       "      <td>37.144583</td>\n",
       "      <td>36.670</td>\n",
       "      <td>3.804785</td>\n",
       "      <td>34.0000</td>\n",
       "      <td>40.3300</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10.76</td>\n",
       "      <td>2.385708</td>\n",
       "      <td>...</td>\n",
       "      <td>14.7500</td>\n",
       "      <td>18.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.75</td>\n",
       "      <td>2.914708</td>\n",
       "      <td>2.595</td>\n",
       "      <td>1.681203</td>\n",
       "      <td>1.6900</td>\n",
       "      <td>3.9000</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>31.00</td>\n",
       "      <td>44.67</td>\n",
       "      <td>37.145083</td>\n",
       "      <td>36.250</td>\n",
       "      <td>3.720410</td>\n",
       "      <td>33.8100</td>\n",
       "      <td>40.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.79</td>\n",
       "      <td>2.452417</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0000</td>\n",
       "      <td>18.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.93</td>\n",
       "      <td>2.730167</td>\n",
       "      <td>2.550</td>\n",
       "      <td>1.590096</td>\n",
       "      <td>1.4950</td>\n",
       "      <td>3.7050</td>\n",
       "      <td>cycling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108</th>\n",
       "      <td>37.25</td>\n",
       "      <td>47.33</td>\n",
       "      <td>43.437458</td>\n",
       "      <td>44.125</td>\n",
       "      <td>1.809284</td>\n",
       "      <td>42.0000</td>\n",
       "      <td>44.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.80</td>\n",
       "      <td>0.393167</td>\n",
       "      <td>...</td>\n",
       "      <td>12.5000</td>\n",
       "      <td>15.3300</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.77</td>\n",
       "      <td>0.756875</td>\n",
       "      <td>0.710</td>\n",
       "      <td>0.559313</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>36.00</td>\n",
       "      <td>45.00</td>\n",
       "      <td>41.911708</td>\n",
       "      <td>41.670</td>\n",
       "      <td>2.636281</td>\n",
       "      <td>39.5000</td>\n",
       "      <td>44.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.17</td>\n",
       "      <td>0.445167</td>\n",
       "      <td>...</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>17.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.74</td>\n",
       "      <td>0.647208</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.571383</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>0.8700</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110</th>\n",
       "      <td>37.00</td>\n",
       "      <td>45.33</td>\n",
       "      <td>42.084750</td>\n",
       "      <td>43.125</td>\n",
       "      <td>2.690071</td>\n",
       "      <td>39.5000</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.83</td>\n",
       "      <td>0.313083</td>\n",
       "      <td>...</td>\n",
       "      <td>16.5000</td>\n",
       "      <td>20.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.67</td>\n",
       "      <td>0.574375</td>\n",
       "      <td>0.485</td>\n",
       "      <td>0.548734</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>0.8300</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>111</th>\n",
       "      <td>36.25</td>\n",
       "      <td>45.75</td>\n",
       "      <td>44.290292</td>\n",
       "      <td>45.000</td>\n",
       "      <td>1.660985</td>\n",
       "      <td>44.5000</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.50</td>\n",
       "      <td>0.229458</td>\n",
       "      <td>...</td>\n",
       "      <td>16.1875</td>\n",
       "      <td>21.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.83</td>\n",
       "      <td>0.716542</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.577943</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>0.8700</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>36.00</td>\n",
       "      <td>46.25</td>\n",
       "      <td>43.413042</td>\n",
       "      <td>45.000</td>\n",
       "      <td>2.584612</td>\n",
       "      <td>42.0000</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.30</td>\n",
       "      <td>0.245167</td>\n",
       "      <td>...</td>\n",
       "      <td>9.5000</td>\n",
       "      <td>14.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.72</td>\n",
       "      <td>1.179375</td>\n",
       "      <td>0.940</td>\n",
       "      <td>0.893286</td>\n",
       "      <td>0.5000</td>\n",
       "      <td>1.5000</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>37.75</td>\n",
       "      <td>47.33</td>\n",
       "      <td>45.469333</td>\n",
       "      <td>45.750</td>\n",
       "      <td>1.706665</td>\n",
       "      <td>45.0000</td>\n",
       "      <td>46.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.50</td>\n",
       "      <td>0.448042</td>\n",
       "      <td>...</td>\n",
       "      <td>12.1875</td>\n",
       "      <td>15.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.91</td>\n",
       "      <td>1.130792</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.788698</td>\n",
       "      <td>0.5000</td>\n",
       "      <td>1.4800</td>\n",
       "      <td>standing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>18.00</td>\n",
       "      <td>45.67</td>\n",
       "      <td>35.236083</td>\n",
       "      <td>36.000</td>\n",
       "      <td>5.057973</td>\n",
       "      <td>31.7500</td>\n",
       "      <td>38.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>15.08</td>\n",
       "      <td>4.295417</td>\n",
       "      <td>...</td>\n",
       "      <td>14.2500</td>\n",
       "      <td>18.6700</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.89</td>\n",
       "      <td>3.106583</td>\n",
       "      <td>2.870</td>\n",
       "      <td>1.742166</td>\n",
       "      <td>1.8850</td>\n",
       "      <td>4.2450</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>23.00</td>\n",
       "      <td>46.00</td>\n",
       "      <td>35.150583</td>\n",
       "      <td>35.625</td>\n",
       "      <td>4.434887</td>\n",
       "      <td>32.1875</td>\n",
       "      <td>38.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>16.20</td>\n",
       "      <td>4.346625</td>\n",
       "      <td>...</td>\n",
       "      <td>14.1875</td>\n",
       "      <td>18.0625</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.50</td>\n",
       "      <td>3.377333</td>\n",
       "      <td>3.255</td>\n",
       "      <td>1.789178</td>\n",
       "      <td>1.9075</td>\n",
       "      <td>4.6100</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>22.33</td>\n",
       "      <td>46.00</td>\n",
       "      <td>34.966250</td>\n",
       "      <td>35.500</td>\n",
       "      <td>4.733014</td>\n",
       "      <td>32.0000</td>\n",
       "      <td>38.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>12.68</td>\n",
       "      <td>4.207958</td>\n",
       "      <td>...</td>\n",
       "      <td>14.3150</td>\n",
       "      <td>18.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.83</td>\n",
       "      <td>3.146333</td>\n",
       "      <td>3.035</td>\n",
       "      <td>1.638218</td>\n",
       "      <td>1.7975</td>\n",
       "      <td>4.2175</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>20.75</td>\n",
       "      <td>46.25</td>\n",
       "      <td>34.560417</td>\n",
       "      <td>35.000</td>\n",
       "      <td>4.752584</td>\n",
       "      <td>31.0000</td>\n",
       "      <td>37.7500</td>\n",
       "      <td>0.43</td>\n",
       "      <td>12.09</td>\n",
       "      <td>4.239625</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0000</td>\n",
       "      <td>18.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.39</td>\n",
       "      <td>3.430208</td>\n",
       "      <td>3.350</td>\n",
       "      <td>1.647979</td>\n",
       "      <td>2.1700</td>\n",
       "      <td>4.4400</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>21.50</td>\n",
       "      <td>45.67</td>\n",
       "      <td>34.737042</td>\n",
       "      <td>35.500</td>\n",
       "      <td>4.276717</td>\n",
       "      <td>32.0000</td>\n",
       "      <td>37.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>12.21</td>\n",
       "      <td>4.217333</td>\n",
       "      <td>...</td>\n",
       "      <td>13.5000</td>\n",
       "      <td>18.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.19</td>\n",
       "      <td>3.334125</td>\n",
       "      <td>3.000</td>\n",
       "      <td>1.737573</td>\n",
       "      <td>2.1800</td>\n",
       "      <td>4.5125</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>21.75</td>\n",
       "      <td>51.00</td>\n",
       "      <td>35.134583</td>\n",
       "      <td>35.585</td>\n",
       "      <td>4.989014</td>\n",
       "      <td>32.1875</td>\n",
       "      <td>38.3125</td>\n",
       "      <td>0.00</td>\n",
       "      <td>11.41</td>\n",
       "      <td>4.014167</td>\n",
       "      <td>...</td>\n",
       "      <td>14.5000</td>\n",
       "      <td>18.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10.21</td>\n",
       "      <td>3.225917</td>\n",
       "      <td>3.085</td>\n",
       "      <td>1.665326</td>\n",
       "      <td>2.0500</td>\n",
       "      <td>4.3500</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>18.33</td>\n",
       "      <td>45.00</td>\n",
       "      <td>33.886458</td>\n",
       "      <td>34.375</td>\n",
       "      <td>5.143776</td>\n",
       "      <td>30.4575</td>\n",
       "      <td>37.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>12.44</td>\n",
       "      <td>4.332208</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0000</td>\n",
       "      <td>17.7500</td>\n",
       "      <td>0.43</td>\n",
       "      <td>7.89</td>\n",
       "      <td>3.248417</td>\n",
       "      <td>3.015</td>\n",
       "      <td>1.565557</td>\n",
       "      <td>2.0500</td>\n",
       "      <td>4.2250</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121</th>\n",
       "      <td>20.33</td>\n",
       "      <td>47.67</td>\n",
       "      <td>34.779625</td>\n",
       "      <td>35.000</td>\n",
       "      <td>4.714249</td>\n",
       "      <td>31.7300</td>\n",
       "      <td>38.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>12.48</td>\n",
       "      <td>4.461708</td>\n",
       "      <td>...</td>\n",
       "      <td>13.6275</td>\n",
       "      <td>18.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.01</td>\n",
       "      <td>3.274750</td>\n",
       "      <td>2.955</td>\n",
       "      <td>1.670593</td>\n",
       "      <td>2.0500</td>\n",
       "      <td>4.4375</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122</th>\n",
       "      <td>18.33</td>\n",
       "      <td>44.00</td>\n",
       "      <td>34.836458</td>\n",
       "      <td>35.750</td>\n",
       "      <td>4.869092</td>\n",
       "      <td>32.0000</td>\n",
       "      <td>38.6900</td>\n",
       "      <td>0.00</td>\n",
       "      <td>12.38</td>\n",
       "      <td>4.257750</td>\n",
       "      <td>...</td>\n",
       "      <td>14.2500</td>\n",
       "      <td>18.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.86</td>\n",
       "      <td>3.169625</td>\n",
       "      <td>2.870</td>\n",
       "      <td>1.647640</td>\n",
       "      <td>2.0600</td>\n",
       "      <td>4.1200</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123</th>\n",
       "      <td>22.67</td>\n",
       "      <td>45.75</td>\n",
       "      <td>34.363292</td>\n",
       "      <td>35.000</td>\n",
       "      <td>4.588342</td>\n",
       "      <td>31.4575</td>\n",
       "      <td>37.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>15.37</td>\n",
       "      <td>4.539917</td>\n",
       "      <td>...</td>\n",
       "      <td>13.9375</td>\n",
       "      <td>18.2500</td>\n",
       "      <td>0.47</td>\n",
       "      <td>8.84</td>\n",
       "      <td>3.409458</td>\n",
       "      <td>3.110</td>\n",
       "      <td>1.707089</td>\n",
       "      <td>2.1700</td>\n",
       "      <td>4.3450</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>23.00</td>\n",
       "      <td>42.75</td>\n",
       "      <td>34.329333</td>\n",
       "      <td>34.710</td>\n",
       "      <td>4.549837</td>\n",
       "      <td>31.3100</td>\n",
       "      <td>37.5425</td>\n",
       "      <td>0.00</td>\n",
       "      <td>14.50</td>\n",
       "      <td>4.315917</td>\n",
       "      <td>...</td>\n",
       "      <td>14.3300</td>\n",
       "      <td>18.3725</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.42</td>\n",
       "      <td>3.381250</td>\n",
       "      <td>3.180</td>\n",
       "      <td>1.725690</td>\n",
       "      <td>2.1200</td>\n",
       "      <td>4.2450</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125</th>\n",
       "      <td>15.50</td>\n",
       "      <td>43.67</td>\n",
       "      <td>34.122417</td>\n",
       "      <td>34.750</td>\n",
       "      <td>4.338107</td>\n",
       "      <td>31.0000</td>\n",
       "      <td>37.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>17.24</td>\n",
       "      <td>4.393083</td>\n",
       "      <td>...</td>\n",
       "      <td>14.3300</td>\n",
       "      <td>18.0000</td>\n",
       "      <td>0.43</td>\n",
       "      <td>9.12</td>\n",
       "      <td>3.577833</td>\n",
       "      <td>3.290</td>\n",
       "      <td>1.794112</td>\n",
       "      <td>2.2900</td>\n",
       "      <td>4.7250</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126</th>\n",
       "      <td>22.50</td>\n",
       "      <td>43.75</td>\n",
       "      <td>33.907292</td>\n",
       "      <td>34.500</td>\n",
       "      <td>4.716603</td>\n",
       "      <td>30.5000</td>\n",
       "      <td>37.0625</td>\n",
       "      <td>0.00</td>\n",
       "      <td>13.50</td>\n",
       "      <td>4.619875</td>\n",
       "      <td>...</td>\n",
       "      <td>13.7500</td>\n",
       "      <td>18.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.32</td>\n",
       "      <td>3.454333</td>\n",
       "      <td>3.340</td>\n",
       "      <td>1.645684</td>\n",
       "      <td>2.1800</td>\n",
       "      <td>4.5000</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>21.50</td>\n",
       "      <td>51.25</td>\n",
       "      <td>34.599750</td>\n",
       "      <td>35.625</td>\n",
       "      <td>5.141681</td>\n",
       "      <td>31.3100</td>\n",
       "      <td>38.2700</td>\n",
       "      <td>0.00</td>\n",
       "      <td>13.55</td>\n",
       "      <td>4.295917</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0000</td>\n",
       "      <td>18.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.08</td>\n",
       "      <td>3.547167</td>\n",
       "      <td>3.270</td>\n",
       "      <td>1.740018</td>\n",
       "      <td>2.2250</td>\n",
       "      <td>4.6400</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128</th>\n",
       "      <td>19.50</td>\n",
       "      <td>45.00</td>\n",
       "      <td>33.334500</td>\n",
       "      <td>34.000</td>\n",
       "      <td>4.874433</td>\n",
       "      <td>29.9375</td>\n",
       "      <td>36.8125</td>\n",
       "      <td>0.00</td>\n",
       "      <td>11.78</td>\n",
       "      <td>4.408083</td>\n",
       "      <td>...</td>\n",
       "      <td>13.7300</td>\n",
       "      <td>18.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.29</td>\n",
       "      <td>3.229167</td>\n",
       "      <td>3.110</td>\n",
       "      <td>1.637310</td>\n",
       "      <td>2.0600</td>\n",
       "      <td>4.2450</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129</th>\n",
       "      <td>22.25</td>\n",
       "      <td>45.33</td>\n",
       "      <td>33.839250</td>\n",
       "      <td>34.500</td>\n",
       "      <td>4.411903</td>\n",
       "      <td>30.7300</td>\n",
       "      <td>37.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>14.67</td>\n",
       "      <td>4.745042</td>\n",
       "      <td>...</td>\n",
       "      <td>13.7300</td>\n",
       "      <td>18.0625</td>\n",
       "      <td>0.43</td>\n",
       "      <td>8.32</td>\n",
       "      <td>3.290292</td>\n",
       "      <td>3.155</td>\n",
       "      <td>1.646023</td>\n",
       "      <td>2.0500</td>\n",
       "      <td>4.4525</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>130</th>\n",
       "      <td>20.33</td>\n",
       "      <td>44.50</td>\n",
       "      <td>34.036750</td>\n",
       "      <td>34.415</td>\n",
       "      <td>4.872880</td>\n",
       "      <td>30.7500</td>\n",
       "      <td>37.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>13.47</td>\n",
       "      <td>4.778292</td>\n",
       "      <td>...</td>\n",
       "      <td>13.3300</td>\n",
       "      <td>17.7500</td>\n",
       "      <td>0.47</td>\n",
       "      <td>8.41</td>\n",
       "      <td>3.543708</td>\n",
       "      <td>3.255</td>\n",
       "      <td>1.703098</td>\n",
       "      <td>2.2800</td>\n",
       "      <td>4.7900</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131</th>\n",
       "      <td>19.75</td>\n",
       "      <td>45.50</td>\n",
       "      <td>34.608750</td>\n",
       "      <td>35.500</td>\n",
       "      <td>4.621400</td>\n",
       "      <td>31.1875</td>\n",
       "      <td>38.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>12.50</td>\n",
       "      <td>4.134375</td>\n",
       "      <td>...</td>\n",
       "      <td>13.5000</td>\n",
       "      <td>17.7500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.67</td>\n",
       "      <td>3.321417</td>\n",
       "      <td>3.155</td>\n",
       "      <td>1.758379</td>\n",
       "      <td>2.0500</td>\n",
       "      <td>4.3950</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>132</th>\n",
       "      <td>19.50</td>\n",
       "      <td>43.33</td>\n",
       "      <td>34.033875</td>\n",
       "      <td>35.000</td>\n",
       "      <td>4.758757</td>\n",
       "      <td>30.9375</td>\n",
       "      <td>37.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>12.47</td>\n",
       "      <td>4.574625</td>\n",
       "      <td>...</td>\n",
       "      <td>14.4575</td>\n",
       "      <td>18.5000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>3.244042</td>\n",
       "      <td>2.980</td>\n",
       "      <td>1.619767</td>\n",
       "      <td>2.1500</td>\n",
       "      <td>4.1500</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133</th>\n",
       "      <td>20.25</td>\n",
       "      <td>46.00</td>\n",
       "      <td>35.058583</td>\n",
       "      <td>35.875</td>\n",
       "      <td>4.880650</td>\n",
       "      <td>31.7500</td>\n",
       "      <td>38.3300</td>\n",
       "      <td>0.00</td>\n",
       "      <td>12.28</td>\n",
       "      <td>4.169292</td>\n",
       "      <td>...</td>\n",
       "      <td>13.6700</td>\n",
       "      <td>17.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.64</td>\n",
       "      <td>3.432208</td>\n",
       "      <td>3.255</td>\n",
       "      <td>1.691050</td>\n",
       "      <td>2.1600</td>\n",
       "      <td>4.5125</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>24.33</td>\n",
       "      <td>44.00</td>\n",
       "      <td>34.920792</td>\n",
       "      <td>35.330</td>\n",
       "      <td>4.272282</td>\n",
       "      <td>32.2500</td>\n",
       "      <td>37.8125</td>\n",
       "      <td>0.00</td>\n",
       "      <td>14.82</td>\n",
       "      <td>4.177958</td>\n",
       "      <td>...</td>\n",
       "      <td>13.5000</td>\n",
       "      <td>18.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.18</td>\n",
       "      <td>3.430625</td>\n",
       "      <td>3.270</td>\n",
       "      <td>1.781928</td>\n",
       "      <td>2.1600</td>\n",
       "      <td>4.5850</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>23.50</td>\n",
       "      <td>46.25</td>\n",
       "      <td>34.825667</td>\n",
       "      <td>35.250</td>\n",
       "      <td>4.785599</td>\n",
       "      <td>31.5000</td>\n",
       "      <td>38.2700</td>\n",
       "      <td>0.43</td>\n",
       "      <td>12.26</td>\n",
       "      <td>4.583208</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0000</td>\n",
       "      <td>18.0625</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.51</td>\n",
       "      <td>3.418667</td>\n",
       "      <td>3.350</td>\n",
       "      <td>1.598536</td>\n",
       "      <td>2.1700</td>\n",
       "      <td>4.4525</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>19.25</td>\n",
       "      <td>44.00</td>\n",
       "      <td>34.916792</td>\n",
       "      <td>35.375</td>\n",
       "      <td>4.634209</td>\n",
       "      <td>31.7500</td>\n",
       "      <td>38.2500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>13.86</td>\n",
       "      <td>4.262333</td>\n",
       "      <td>...</td>\n",
       "      <td>13.7300</td>\n",
       "      <td>18.0000</td>\n",
       "      <td>0.43</td>\n",
       "      <td>9.00</td>\n",
       "      <td>3.439917</td>\n",
       "      <td>3.200</td>\n",
       "      <td>1.737420</td>\n",
       "      <td>2.1500</td>\n",
       "      <td>4.5075</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>20.75</td>\n",
       "      <td>43.33</td>\n",
       "      <td>34.029583</td>\n",
       "      <td>34.500</td>\n",
       "      <td>4.923609</td>\n",
       "      <td>30.7300</td>\n",
       "      <td>38.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>12.97</td>\n",
       "      <td>4.456292</td>\n",
       "      <td>...</td>\n",
       "      <td>13.7300</td>\n",
       "      <td>17.5000</td>\n",
       "      <td>0.43</td>\n",
       "      <td>8.26</td>\n",
       "      <td>3.241000</td>\n",
       "      <td>3.060</td>\n",
       "      <td>1.657578</td>\n",
       "      <td>2.1200</td>\n",
       "      <td>4.3050</td>\n",
       "      <td>walking</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>138 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      min1   max1      mean1  median1      std1  1st_quart1  3rd_quart1  min2  \\\n",
       "0    36.50  46.50  44.057167   44.500  1.556971     43.2500     45.0000  0.00   \n",
       "1    35.00  47.40  43.851833   43.500  1.557168     43.0000     45.0000  0.00   \n",
       "2    33.75  47.75  43.278875   45.000  3.473355     42.0000     45.2500  0.00   \n",
       "3    33.00  46.00  41.080750   42.000  3.537481     37.7500     44.5000  0.00   \n",
       "4    33.00  45.75  41.621208   42.330  3.118644     39.6525     44.2500  0.00   \n",
       "5    39.25  43.67  41.734917   41.500  0.595920     41.5000     42.0000  0.00   \n",
       "6    39.00  48.00  44.117042   45.000  1.359836     43.5000     45.0000  0.00   \n",
       "7    37.00  46.50  42.792875   42.670  1.058792     42.5000     43.0000  0.00   \n",
       "8    36.67  45.00  43.486208   43.710  1.281976     42.3300     44.5000  0.00   \n",
       "9    36.25  48.00  44.452042   44.500  1.771251     44.2500     44.7500  0.00   \n",
       "10   21.00  50.00  32.014375   26.125  8.743464     24.7300     42.0000  0.00   \n",
       "11   27.00  36.00  33.158042   33.000  0.941701     33.0000     33.7500  0.00   \n",
       "12   29.00  33.00  30.712417   30.290  0.937965     30.0000     31.5000  0.00   \n",
       "13   27.50  30.00  29.051458   29.000  0.635067     28.6700     29.5000  0.00   \n",
       "14   19.00  39.25  29.189875   27.000  6.216895     25.9375     36.0000  0.00   \n",
       "15   20.00  45.50  32.686333   30.000  8.576204     27.0000     42.0000  0.00   \n",
       "16   25.00  47.50  34.110625   30.500  5.097232     30.0000     39.3725  0.00   \n",
       "17   25.00  33.00  28.005875   27.585  1.434469     27.0000     29.0000  0.00   \n",
       "18   26.00  44.00  36.183208   35.750  3.324873     34.0000     38.8125  0.00   \n",
       "19   19.00  44.00  36.273583   36.000  3.727665     33.7500     39.2500  0.00   \n",
       "20   28.00  43.33  36.517542   36.000  3.305618     34.2500     39.0000  0.00   \n",
       "21   26.50  44.33  36.857042   36.000  3.739054     34.5000     39.7500  0.00   \n",
       "22   27.80  44.67  37.069917   36.250  3.822253     34.5000     40.2700  0.00   \n",
       "23   25.33  45.00  37.158708   36.250  3.602490     35.0000     40.0625  0.00   \n",
       "24   26.75  44.50  36.830792   36.330  3.663132     34.6700     39.7500  0.00   \n",
       "25   27.33  44.75  36.895958   36.250  3.452460     34.4750     39.8125  0.00   \n",
       "26   26.25  43.40  36.865417   36.250  3.462793     34.3100     40.0000  0.00   \n",
       "27   29.25  44.25  37.049500   36.415  3.411449     34.5000     40.2500  0.00   \n",
       "28   27.75  44.00  37.144583   36.670  3.804785     34.0000     40.3300  0.00   \n",
       "29   31.00  44.67  37.145083   36.250  3.720410     33.8100     40.5000  0.00   \n",
       "..     ...    ...        ...      ...       ...         ...         ...   ...   \n",
       "108  37.25  47.33  43.437458   44.125  1.809284     42.0000     44.7500  0.00   \n",
       "109  36.00  45.00  41.911708   41.670  2.636281     39.5000     44.7500  0.00   \n",
       "110  37.00  45.33  42.084750   43.125  2.690071     39.5000     45.0000  0.00   \n",
       "111  36.25  45.75  44.290292   45.000  1.660985     44.5000     45.0000  0.00   \n",
       "112  36.00  46.25  43.413042   45.000  2.584612     42.0000     45.0000  0.00   \n",
       "113  37.75  47.33  45.469333   45.750  1.706665     45.0000     46.5000  0.00   \n",
       "114  18.00  45.67  35.236083   36.000  5.057973     31.7500     38.7500  0.00   \n",
       "115  23.00  46.00  35.150583   35.625  4.434887     32.1875     38.5000  0.00   \n",
       "116  22.33  46.00  34.966250   35.500  4.733014     32.0000     38.7500  0.00   \n",
       "117  20.75  46.25  34.560417   35.000  4.752584     31.0000     37.7500  0.43   \n",
       "118  21.50  45.67  34.737042   35.500  4.276717     32.0000     37.7500  0.00   \n",
       "119  21.75  51.00  35.134583   35.585  4.989014     32.1875     38.3125  0.00   \n",
       "120  18.33  45.00  33.886458   34.375  5.143776     30.4575     37.5000  0.00   \n",
       "121  20.33  47.67  34.779625   35.000  4.714249     31.7300     38.2500  0.00   \n",
       "122  18.33  44.00  34.836458   35.750  4.869092     32.0000     38.6900  0.00   \n",
       "123  22.67  45.75  34.363292   35.000  4.588342     31.4575     37.5000  0.00   \n",
       "124  23.00  42.75  34.329333   34.710  4.549837     31.3100     37.5425  0.00   \n",
       "125  15.50  43.67  34.122417   34.750  4.338107     31.0000     37.2500  0.00   \n",
       "126  22.50  43.75  33.907292   34.500  4.716603     30.5000     37.0625  0.00   \n",
       "127  21.50  51.25  34.599750   35.625  5.141681     31.3100     38.2700  0.00   \n",
       "128  19.50  45.00  33.334500   34.000  4.874433     29.9375     36.8125  0.00   \n",
       "129  22.25  45.33  33.839250   34.500  4.411903     30.7300     37.0000  0.00   \n",
       "130  20.33  44.50  34.036750   34.415  4.872880     30.7500     37.7500  0.00   \n",
       "131  19.75  45.50  34.608750   35.500  4.621400     31.1875     38.2500  0.00   \n",
       "132  19.50  43.33  34.033875   35.000  4.758757     30.9375     37.5000  0.00   \n",
       "133  20.25  46.00  35.058583   35.875  4.880650     31.7500     38.3300  0.00   \n",
       "134  24.33  44.00  34.920792   35.330  4.272282     32.2500     37.8125  0.00   \n",
       "135  23.50  46.25  34.825667   35.250  4.785599     31.5000     38.2700  0.43   \n",
       "136  19.25  44.00  34.916792   35.375  4.634209     31.7500     38.2500  0.00   \n",
       "137  20.75  43.33  34.029583   34.500  4.923609     30.7300     38.0000  0.00   \n",
       "\n",
       "      max2     mean2    ...     1st_quart5  3rd_quart5  min6   max6     mean6  \\\n",
       "0     1.50  0.381042    ...        36.0000     37.0000  0.00   1.79  0.598250   \n",
       "1     1.70  0.471458    ...        33.0000     36.2500  0.00   1.50  0.388333   \n",
       "2     3.00  0.673292    ...        36.0000     37.0000  0.00   1.53  0.640958   \n",
       "3     2.86  0.718792    ...        28.7500     33.7500  0.00   2.18  0.586083   \n",
       "4     2.83  0.623083    ...        28.5000     31.5000  0.00   1.79  0.419083   \n",
       "5     1.12  0.448875    ...        28.3100     30.5625  0.00   1.50  0.347500   \n",
       "6     1.30  0.250042    ...        21.7500     24.2500  0.00   5.26  0.815417   \n",
       "7     1.58  0.506125    ...        22.5000     23.7500  0.00   4.06  0.543875   \n",
       "8     1.30  0.378667    ...        19.2500     24.0000  0.00   2.28  0.524875   \n",
       "9     1.50  0.447583    ...        21.0000     23.5000  0.00   2.96  0.585750   \n",
       "10    9.90  0.587875    ...        18.4575     27.0000  0.00  13.61  1.538042   \n",
       "11    1.87  0.444375    ...        16.9375     20.0000  0.00   6.02  0.786042   \n",
       "12    1.00  0.298958    ...        16.3300     18.7500  0.00   6.40  0.725333   \n",
       "13    0.87  0.213917    ...        17.3300     19.2500  0.00   1.50  0.677917   \n",
       "14    4.33  0.497042    ...        16.4575     20.0000  0.00   6.73  1.099792   \n",
       "15    6.40  0.437292    ...        14.4575     25.0000  0.00   5.61  1.114917   \n",
       "16    6.38  0.528500    ...        10.0000     26.3125  0.00   4.71  0.996250   \n",
       "17    2.18  0.282417    ...         8.3300     13.7500  0.00   4.92  1.199958   \n",
       "18    9.65  2.753583    ...        13.6275     17.5425  0.00   9.98  3.486042   \n",
       "19   12.28  2.909792    ...        14.1500     18.6700  0.00   8.61  3.475333   \n",
       "20   10.85  2.874625    ...        13.9375     17.7500  0.00   7.89  3.138583   \n",
       "21   12.89  3.071458    ...        15.7500     19.0000  0.00   8.19  3.008042   \n",
       "22   10.50  2.792250    ...        14.5000     18.0000  0.00   8.32  2.908667   \n",
       "23   10.84  2.667750    ...        15.0000     18.8125  0.00   9.50  3.244042   \n",
       "24   11.68  2.838500    ...        14.0000     18.6900  0.00   8.81  2.970083   \n",
       "25   10.50  2.676125    ...        15.4575     18.6700  0.00   8.44  2.576542   \n",
       "26    7.46  2.387250    ...        13.7500     18.2500  0.00   8.26  2.964792   \n",
       "27    8.64  2.452917    ...        14.3300     18.0000  0.00   8.34  2.904458   \n",
       "28   10.76  2.385708    ...        14.7500     18.7500  0.00   8.75  2.914708   \n",
       "29    7.79  2.452417    ...        15.0000     18.7500  0.00   7.93  2.730167   \n",
       "..     ...       ...    ...            ...         ...   ...    ...       ...   \n",
       "108   1.80  0.393167    ...        12.5000     15.3300  0.00   3.77  0.756875   \n",
       "109   2.17  0.445167    ...        13.0000     17.7500  0.00   3.74  0.647208   \n",
       "110   2.83  0.313083    ...        16.5000     20.2500  0.00   3.67  0.574375   \n",
       "111   1.50  0.229458    ...        16.1875     21.5000  0.00   3.83  0.716542   \n",
       "112   1.30  0.245167    ...         9.5000     14.2500  0.00   4.72  1.179375   \n",
       "113   4.50  0.448042    ...        12.1875     15.2500  0.00   5.91  1.130792   \n",
       "114  15.08  4.295417    ...        14.2500     18.6700  0.00   7.89  3.106583   \n",
       "115  16.20  4.346625    ...        14.1875     18.0625  0.00   8.50  3.377333   \n",
       "116  12.68  4.207958    ...        14.3150     18.2500  0.00   8.83  3.146333   \n",
       "117  12.09  4.239625    ...        14.0000     18.5000  0.00   9.39  3.430208   \n",
       "118  12.21  4.217333    ...        13.5000     18.2500  0.00   9.19  3.334125   \n",
       "119  11.41  4.014167    ...        14.5000     18.2500  0.00  10.21  3.225917   \n",
       "120  12.44  4.332208    ...        14.0000     17.7500  0.43   7.89  3.248417   \n",
       "121  12.48  4.461708    ...        13.6275     18.2500  0.00   8.01  3.274750   \n",
       "122  12.38  4.257750    ...        14.2500     18.2500  0.00   8.86  3.169625   \n",
       "123  15.37  4.539917    ...        13.9375     18.2500  0.47   8.84  3.409458   \n",
       "124  14.50  4.315917    ...        14.3300     18.3725  0.00   9.42  3.381250   \n",
       "125  17.24  4.393083    ...        14.3300     18.0000  0.43   9.12  3.577833   \n",
       "126  13.50  4.619875    ...        13.7500     18.0000  0.00   8.32  3.454333   \n",
       "127  13.55  4.295917    ...        14.0000     18.0000  0.00   8.08  3.547167   \n",
       "128  11.78  4.408083    ...        13.7300     18.2500  0.00   8.29  3.229167   \n",
       "129  14.67  4.745042    ...        13.7300     18.0625  0.43   8.32  3.290292   \n",
       "130  13.47  4.778292    ...        13.3300     17.7500  0.47   8.41  3.543708   \n",
       "131  12.50  4.134375    ...        13.5000     17.7500  0.00   9.67  3.321417   \n",
       "132  12.47  4.574625    ...        14.4575     18.5000  0.00  10.00  3.244042   \n",
       "133  12.28  4.169292    ...        13.6700     17.2500  0.00   8.64  3.432208   \n",
       "134  14.82  4.177958    ...        13.5000     18.0000  0.00   9.18  3.430625   \n",
       "135  12.26  4.583208    ...        14.0000     18.0625  0.00   9.51  3.418667   \n",
       "136  13.86  4.262333    ...        13.7300     18.0000  0.43   9.00  3.439917   \n",
       "137  12.97  4.456292    ...        13.7300     17.5000  0.43   8.26  3.241000   \n",
       "\n",
       "     median6      std6  1st_quart6  3rd_quart6  activity  \n",
       "0      0.500  0.526656      0.0000      1.0000  bending1  \n",
       "1      0.000  0.478528      0.0000      0.7100  bending1  \n",
       "2      0.765  0.554542      0.0000      1.2200  bending1  \n",
       "3      0.470  0.491873      0.0000      0.8700  bending1  \n",
       "4      0.430  0.411200      0.0000      0.7100  bending1  \n",
       "5      0.430  0.363144      0.0000      0.5000  bending1  \n",
       "6      0.710  0.718016      0.4300      1.1200  bending1  \n",
       "7      0.500  0.473445      0.4300      0.7100  bending1  \n",
       "8      0.470  0.486847      0.0000      0.8300  bending1  \n",
       "9      0.500  0.487918      0.4225      0.8300  bending1  \n",
       "10     1.045  1.639122      0.5000      2.0500  bending2  \n",
       "11     0.710  0.768408      0.4700      0.9400  bending2  \n",
       "12     0.710  0.599116      0.4700      0.9400  bending2  \n",
       "13     0.710  0.322210      0.4700      0.9400  bending2  \n",
       "14     0.820  1.161161      0.4700      1.2200  bending2  \n",
       "15     0.870  0.996452      0.4700      1.3000  bending2  \n",
       "16     0.830  0.813779      0.4700      1.2500  bending2  \n",
       "17     1.000  0.838177      0.7100      1.4100  bending2  \n",
       "18     3.320  1.797080      2.1500      4.5525   cycling  \n",
       "19     3.340  1.861694      2.0500      4.5075   cycling  \n",
       "20     2.865  1.591958      2.0375      4.4550   cycling  \n",
       "21     2.680  1.667305      1.8525      3.8150   cycling  \n",
       "22     2.525  1.719806      1.7000      3.7700   cycling  \n",
       "23     2.905  1.912478      1.7975      4.4250   cycling  \n",
       "24     2.650  1.686158      1.7000      3.8475   cycling  \n",
       "25     2.520  1.420814      1.5000      3.4150   cycling  \n",
       "26     2.500  1.655499      1.6550      4.0375   cycling  \n",
       "27     2.570  1.609793      1.6900      3.7700   cycling  \n",
       "28     2.595  1.681203      1.6900      3.9000   cycling  \n",
       "29     2.550  1.590096      1.4950      3.7050   cycling  \n",
       "..       ...       ...         ...         ...       ...  \n",
       "108    0.710  0.559313      0.4300      1.0000  standing  \n",
       "109    0.500  0.571383      0.4300      0.8700  standing  \n",
       "110    0.485  0.548734      0.4300      0.8300  standing  \n",
       "111    0.500  0.577943      0.4300      0.8700  standing  \n",
       "112    0.940  0.893286      0.5000      1.5000  standing  \n",
       "113    1.000  0.788698      0.5000      1.4800  standing  \n",
       "114    2.870  1.742166      1.8850      4.2450   walking  \n",
       "115    3.255  1.789178      1.9075      4.6100   walking  \n",
       "116    3.035  1.638218      1.7975      4.2175   walking  \n",
       "117    3.350  1.647979      2.1700      4.4400   walking  \n",
       "118    3.000  1.737573      2.1800      4.5125   walking  \n",
       "119    3.085  1.665326      2.0500      4.3500   walking  \n",
       "120    3.015  1.565557      2.0500      4.2250   walking  \n",
       "121    2.955  1.670593      2.0500      4.4375   walking  \n",
       "122    2.870  1.647640      2.0600      4.1200   walking  \n",
       "123    3.110  1.707089      2.1700      4.3450   walking  \n",
       "124    3.180  1.725690      2.1200      4.2450   walking  \n",
       "125    3.290  1.794112      2.2900      4.7250   walking  \n",
       "126    3.340  1.645684      2.1800      4.5000   walking  \n",
       "127    3.270  1.740018      2.2250      4.6400   walking  \n",
       "128    3.110  1.637310      2.0600      4.2450   walking  \n",
       "129    3.155  1.646023      2.0500      4.4525   walking  \n",
       "130    3.255  1.703098      2.2800      4.7900   walking  \n",
       "131    3.155  1.758379      2.0500      4.3950   walking  \n",
       "132    2.980  1.619767      2.1500      4.1500   walking  \n",
       "133    3.255  1.691050      2.1600      4.5125   walking  \n",
       "134    3.270  1.781928      2.1600      4.5850   walking  \n",
       "135    3.350  1.598536      2.1700      4.4525   walking  \n",
       "136    3.200  1.737420      2.1500      4.5075   walking  \n",
       "137    3.060  1.657578      2.1200      4.3050   walking  \n",
       "\n",
       "[138 rows x 43 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "splitted = [] \n",
    "for train in train_data2: \n",
    "    df1 = train[0][:240]\n",
    "    df2 = train[0][240:]\n",
    "    splitted.append((df1, train[1]))\n",
    "    splitted.append((df2, train[1]))\n",
    "    \n",
    "split_read = []\n",
    "for ds in splitted:\n",
    "    df = ds[0]\n",
    "    stats = df.describe()\n",
    "    stats = stats.loc[['min','max','mean','50%','std','25%','75%']]\n",
    "    row = pd.Series()\n",
    "    for i in range(1, 7):\n",
    "        row['min'+str(i)] = stats.iloc[0,i]\n",
    "        row['max'+str(i)] = stats.iloc[1,i]\n",
    "        row['mean'+str(i)] = stats.iloc[2,i]\n",
    "        row['median'+str(i)] = stats.iloc[3,i]\n",
    "        row['std'+str(i)] = stats.iloc[4,i]\n",
    "        row['1st_quart'+str(i)] = stats.iloc[5,i]\n",
    "        row['3rd_quart'+str(i)] = stats.iloc[6,i]\n",
    "    row['activity'] = ds[1]\n",
    "    split_read.append(row)\n",
    "    \n",
    "split_read = pd.DataFrame(split_read)\n",
    "split_read"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "newData2 = split_read\n",
    "\n",
    "bending1 = newData2.loc[newData2['activity'] == 'bending1']\n",
    "bending2 = newData2.loc[newData2['activity'] == 'bending2']\n",
    "\n",
    "cycling = newData2.loc[newData2['activity'] == 'cycling']\n",
    "lying = newData2.loc[newData2['activity'] == 'lying']\n",
    "sitting = newData2.loc[newData2['activity'] == 'sitting']\n",
    "standing = newData2.loc[newData2['activity'] == 'standing']\n",
    "walking = newData2.loc[newData2['activity'] == 'walking']\n",
    "\n",
    "bending_all = bending1.append(bending2)\n",
    "#cycling + lying + sitting + standing + walking\n",
    "etc = cycling.append(lying)\n",
    "etc = etc.append(sitting)\n",
    "etc = etc.append(standing)\n",
    "etc = etc.append(walking)\n",
    "\n",
    "# Time Series 1\n",
    "min1_bending = list(bending_all['min1'])\n",
    "min1_etc = list(etc['min1'])\n",
    "\n",
    "max1_bending = list(bending_all['max1'])\n",
    "max1_etc = list(etc['max1'])    \n",
    "\n",
    "mean1_bending = list(bending_all['mean1'])\n",
    "mean1_etc = list(etc['mean1'])    \n",
    "\n",
    "# Time Series 2\n",
    "min2_bending = list(bending_all['min2'])\n",
    "min2_etc = list(etc['min2'])\n",
    "\n",
    "max2_bending = list(bending_all['max2'])\n",
    "max2_etc = list(etc['max2'])    \n",
    "\n",
    "mean2_bending = list(bending_all['mean2'])\n",
    "mean2_etc = list(etc['mean2'])    \n",
    "\n",
    "# Time Series 6\n",
    "min6_bending = list(bending_all['min6'])\n",
    "min6_etc = list(etc['min6'])\n",
    "\n",
    "max6_bending = list(bending_all['max6'])\n",
    "max6_etc = list(etc['max6'])    \n",
    "\n",
    "mean6_bending = list(bending_all['mean6'])\n",
    "mean6_etc = list(etc['mean6'])   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time Series 1: \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Time Series 1: \")\n",
    "plt.xlabel(\"min1\")\n",
    "plt.ylabel(\"max1\")\n",
    "plt.scatter(min1_bending, max1_bending, color = 'b', marker = 'o')\n",
    "plt.scatter(min1_etc, max1_etc, color = 'r', marker = 'o')\n",
    "plt.show()\n",
    "\n",
    "plt.xlabel(\"min1\")\n",
    "plt.ylabel(\"mean1\")\n",
    "plt.scatter(min1_bending, mean1_bending, color = 'b', marker = 'o')\n",
    "plt.scatter(min1_etc, mean1_etc, color = 'r', marker = 'o')\n",
    "plt.show()\n",
    "\n",
    "plt.xlabel(\"max1\")\n",
    "plt.ylabel(\"mean1\")\n",
    "plt.scatter(max1_bending, mean1_bending, color = 'b', marker = 'o')\n",
    "plt.scatter(max1_etc, mean1_etc, color = 'r', marker = 'o')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time Series 2: \n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Time Series 2: \")\n",
    "plt.xlabel(\"min2\")\n",
    "plt.ylabel(\"max2\")\n",
    "plt.scatter(min2_bending, max2_bending, color = 'b', marker = 'o')\n",
    "plt.scatter(min2_etc, max2_etc, color = 'r', marker = 'o')\n",
    "plt.show()\n",
    "\n",
    "plt.xlabel(\"min2\")\n",
    "plt.ylabel(\"mean2\")\n",
    "plt.scatter(min2_bending, mean1_bending, color = 'b', marker = 'o')\n",
    "plt.scatter(min2_etc, mean1_etc, color = 'r', marker = 'o')\n",
    "plt.show()\n",
    "\n",
    "plt.xlabel(\"max2\")\n",
    "plt.ylabel(\"mean2\")\n",
    "plt.scatter(max2_bending, mean2_bending, color = 'b', marker = 'o')\n",
    "plt.scatter(max2_etc, mean2_etc, color = 'r', marker = 'o')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time Series 6: \n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Time Series 6: \")\n",
    "plt.xlabel(\"min6\")\n",
    "plt.ylabel(\"max6\")\n",
    "plt.scatter(min6_bending, max6_bending, color = 'b', marker = 'o')\n",
    "plt.scatter(min6_etc, max6_etc, color = 'r', marker = 'o')\n",
    "plt.show()\n",
    "\n",
    "plt.xlabel(\"min6\")\n",
    "plt.ylabel(\"mean6\")\n",
    "plt.scatter(min6_bending, mean6_bending, color = 'b', marker = 'o')\n",
    "plt.scatter(min6_etc, mean6_etc, color = 'r', marker = 'o')\n",
    "plt.show()\n",
    "\n",
    "plt.xlabel(\"max6\")\n",
    "plt.ylabel(\"mean6\")\n",
    "plt.scatter(max6_bending, mean6_bending, color = 'b', marker = 'o')\n",
    "plt.scatter(max6_etc, mean6_etc, color = 'r', marker = 'o')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# function to split dataset into l time series of approximately equal length \n",
    "def split_data(dataframe, split_factor):\n",
    "    splitted = [] \n",
    "    for train in dataframe: \n",
    "        preprocessing_split_df = train[0]\n",
    "        equal_split_list = np.array_split(preprocessing_split_df, split_factor) \n",
    "        for i in range(len(equal_split_list)): \n",
    "            splitted.append((equal_split_list[i], train[1]))\n",
    "    \n",
    "    split_read = []\n",
    "    for ds in splitted:\n",
    "        df = ds[0]\n",
    "        stats = df.describe()\n",
    "        stats = stats.loc[['min','max','mean','50%','std','25%','75%']]\n",
    "        row = pd.Series()\n",
    "        for i in range(1, 7):\n",
    "            row['min'+str(i)] = stats.iloc[0, i]\n",
    "            row['max'+str(i)] = stats.iloc[1, i]\n",
    "            row['mean'+str(i)] = stats.iloc[2, i]\n",
    "            row['median'+str(i)] = stats.iloc[3, i]\n",
    "            row['std'+str(i)] = stats.iloc[4, i]\n",
    "            row['1st_quart'+str(i)] = stats.iloc[5, i]\n",
    "            row['3rd_quart'+str(i)] = stats.iloc[6, i]\n",
    "        row['activity'] = ds[1]\n",
    "        split_read.append(row)\n",
    "        \n",
    "    split_read = pd.DataFrame(split_read)\n",
    "    return split_read"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 1.0\n",
      "Confusion matrix:\n",
      "[[ 4  0]\n",
      " [ 0 15]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00         4\n",
      "           1       1.00      1.00      1.00        15\n",
      "\n",
      "   micro avg       1.00      1.00      1.00        19\n",
      "   macro avg       1.00      1.00      1.00        19\n",
      "weighted avg       1.00      1.00      1.00        19\n",
      "\n"
     ]
    }
   ],
   "source": [
    "split2_train = split_data(train_data2, 2)\n",
    "#split2_test = split_data(test_data2, 2)\n",
    "\n",
    "original_train = split2_train\n",
    "#original_test = split2_test\n",
    "# encode into 0 or 1 \n",
    "original_train['bending'] = np.where(np.logical_or((original_train.activity == 'bending1'), (original_train.activity == 'bending2')), 0, 1) \n",
    "original_train_binary = original_train.drop('activity', axis = 1)\n",
    "# split the dataset into feature vector and a label vector \n",
    "x_train = pd.DataFrame(original_train_binary, columns = original_train_binary.columns[:-1])\n",
    "y_train = original_train_binary['bending']\n",
    "\n",
    "logisticRegr = LogisticRegression()\n",
    "logisticRegr.fit(x_train, y_train)\n",
    "score = logisticRegr.score(x_test, y_test)\n",
    "print(\"Accuracy: \" + str(score))\n",
    "y_pred = logisticRegr.predict(x_test)\n",
    "print(\"Confusion matrix:\")\n",
    "print(confusion_matrix(y_test, y_pred))\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- The test error is 0 for both i) and ii) and an accuracy of 100%. However, usually splitting the data is recommended as splitting can modify the features. It treats the whole data as two new data sets which can lead to better training of the model, and usually as we have more training examples, the better the model. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "iii. Break each time series in your training set into l ∈ {1, 2, . . . , 20} time series of approximately equal length and use logistic regression to solve the binary classification problem, using time-domain features. Calculate the p-values for your logistic regression parameters and refit a logistic regression model using your pruned set of features. Alternatively, you can use backward selection using sklearn.feature selection or glm in R. Use 5-fold cross-validation to determine the best value of l. Explain what the right way and the wrong way are to perform cross-validation in this problem.6 Obviously, use the right way! Also, you may encounter the problem of class imbalance, which may make some of your folds not having any instances of the rare class. In such a case, you can use stratified cross validation. Research what it means and use it if needed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# https://gist.github.com/rspeare/77061e6e317896be29c6de9a85db301d\n",
    "# found an online logistic regression class that calculates p-values \n",
    "\n",
    "from sklearn import linear_model\n",
    "import numpy as np\n",
    "import scipy.stats as stat\n",
    "\n",
    "class LogisticReg:\n",
    "    \"\"\"\n",
    "    Wrapper Class for Logistic Regression which has the usual sklearn instance \n",
    "    in an attribute self.model, and pvalues, z scores and estimated \n",
    "    errors for each coefficient in \n",
    "    \n",
    "    self.z_scores\n",
    "    self.p_values\n",
    "    self.sigma_estimates\n",
    "    \n",
    "    as well as the negative hessian of the log Likelihood (Fisher information)\n",
    "    \n",
    "    self.F_ij\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self,*args,**kwargs):#,**kwargs):\n",
    "        self.model = linear_model.LogisticRegression(*args,**kwargs)#,**args)\n",
    "\n",
    "    def fit(self,X,y):\n",
    "        self.model.fit(X,y)\n",
    "        #### Get p-values for the fitted model ####\n",
    "        denom = (2.0*(1.0+np.cosh(self.model.decision_function(X))))\n",
    "        denom = np.tile(denom,(X.shape[1],1)).T\n",
    "        F_ij = np.dot((X/denom).T,X) ## Fisher Information Matrix\n",
    "        Cramer_Rao = np.linalg.inv(F_ij) ## Inverse Information Matrix\n",
    "        sigma_estimates = np.array([np.sqrt(Cramer_Rao[i,i]) for i in range(Cramer_Rao.shape[0])]) # sigma for each coefficient\n",
    "        z_scores = self.model.coef_[0]/sigma_estimates # z-score for eaach model coefficient\n",
    "        p_values = [stat.norm.sf(abs(x))*2 for x in z_scores] ### two tailed test for p-values\n",
    "        \n",
    "        self.z_scores = z_scores\n",
    "        self.p_values = p_values\n",
    "        self.sigma_estimates = sigma_estimates\n",
    "        self.F_ij = F_ij"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "cv_accuracy = [] \n",
    "feature_sets = []\n",
    "feature_nums = []\n",
    "for k in range(1, 21): \n",
    "    train = split_data(train_data2, k)\n",
    "    original_train = train\n",
    "    \n",
    "    # encode into 0 or 1 \n",
    "    original_train['bending'] = np.where(np.logical_or((original_train.activity == 'bending1'), (original_train.activity == 'bending2')), 0, 1) \n",
    "    original_train_binary = original_train.drop('activity', axis = 1)\n",
    "    # split the dataset into feature vector and a label vector \n",
    "    x_train = pd.DataFrame(original_train_binary, columns = original_train_binary.columns[:-1])\n",
    "    y_train = original_train_binary['bending']\n",
    "    logisticR = LogisticRegression()\n",
    "    \n",
    "    rfecv = RFECV(estimator=logisticR, step=1, cv=StratifiedKFold(n_splits=5, shuffle=True, random_state=9), scoring='accuracy')\n",
    "    rfecv.fit(x_train, y_train)\n",
    "    cv_accuracy.append(max(rfecv.grid_scores_))\n",
    "    selected_indices = np.argwhere(rfecv.support_==True).flatten() \n",
    "    feature_sets.append(selected_indices)\n",
    "    feature_nums.append(rfecv.n_features_)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best value of l is 1 and the best cross validation accuracy is 1.0\n",
      "When l = 1, we selecte 8 features, and they are ['mean1', '3rd_quart1', 'max2', 'median3', 'min5', 'max5', 'mean5', '1st_quart5']\n"
     ]
    }
   ],
   "source": [
    "plt.plot(range(1,21), cv_accuracy)\n",
    "plt.xlabel('l')\n",
    "plt.ylabel('cross-validation accuracy')\n",
    "plt.show()\n",
    "\n",
    "l_best = np.argmax(cv_accuracy) + 1\n",
    "best_accuracy = max(cv_accuracy)\n",
    "print(\"The best value of l is \" + str(l_best) + \" and the best cross validation accuracy is \" + str(best_accuracy))\n",
    "\n",
    "selected_indices = feature_sets[0]\n",
    "selected = []\n",
    "for i in selected_indices:\n",
    "    selected.append(features[i])\n",
    "print(\"When l = 1, we selecte \" + str(len(selected)) + \" features, and they are \" + str(selected))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- In this part, backward selection from sklearn.feature_selection was used to select the features. \n",
    "- The correct way to use cross validation is using backward selection for each value of l, using corss validation accuracy to select the features and then selecting l with the highest cross validation accuracy. Thus, cross validation has to occur on both l and for feature selection \n",
    "- The wrong way to use cross validation is only using cross validation to choose l but not using cross validation for feature selection. Thus, cross validation must be used to select the best feature sets for each l. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "iv. Report the confusion matrix and show the ROC and AUC for your classifier on train data. Report the parameters of your logistic regression βi’s as well as the p-values associated with them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix:\n",
      "[[ 9  0]\n",
      " [ 0 60]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Area under the curve is 1.0\n"
     ]
    }
   ],
   "source": [
    "split2_train = split_data(train_data2, 1)\n",
    "split2_test = split_data(test_data2, 1)\n",
    "\n",
    "original_train = split2_train\n",
    "original_test = split2_test\n",
    "# encode into 0 or 1 \n",
    "original_train['bending'] = np.where(np.logical_or((original_train.activity == 'bending1'), (original_train.activity == 'bending2')), 0, 1) \n",
    "original_train_binary = original_train.drop('activity', axis = 1)\n",
    "# split the dataset into feature vector and a label vector \n",
    "x_train = pd.DataFrame(original_train_binary, columns = original_train_binary.columns[:-1])\n",
    "y_train = original_train_binary['bending']\n",
    "\n",
    "# encode into 0 or 1 \n",
    "original_test['bending'] = np.where(np.logical_or((original_test.activity == 'bending1'), (original_test.activity == 'bending2')), 0, 1) \n",
    "original_test_binary = original_test.drop('activity', axis = 1)\n",
    "# split the dataset into feature vector and a label vector \n",
    "x_test = pd.DataFrame(original_test_binary, columns = original_test_binary.columns[:-1])\n",
    "y_test = original_test_binary['bending']\n",
    "\n",
    "logit = LogisticRegression()\n",
    "logit.fit(x_train, y_train)\n",
    "y_pred = logit.predict(x_train)\n",
    "\n",
    "print(\"Confusion matrix:\")\n",
    "print(metrics.confusion_matrix(y_train, y_pred))\n",
    "\n",
    "fpr, tpr, thresh = roc_curve(y_train, y_pred)\n",
    "plt.figure()\n",
    "plt.plot(fpr, tpr)\n",
    "plt.plot([0, 1], [0, 1],'r--')\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.show()\n",
    "\n",
    "auc = roc_auc_score(y_train, y_pred)\n",
    "print(\"Area under the curve is \" + str(auc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>coefficient</th>\n",
       "      <th>p-values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>mean1</th>\n",
       "      <td>0.308439</td>\n",
       "      <td>0.827577</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3rd_quart1</th>\n",
       "      <td>0.384309</td>\n",
       "      <td>0.812175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max2</th>\n",
       "      <td>0.409483</td>\n",
       "      <td>0.540287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>median3</th>\n",
       "      <td>0.226237</td>\n",
       "      <td>0.749297</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min5</th>\n",
       "      <td>-0.439377</td>\n",
       "      <td>0.661229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max5</th>\n",
       "      <td>-0.645561</td>\n",
       "      <td>0.450377</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean5</th>\n",
       "      <td>-0.280896</td>\n",
       "      <td>0.961755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1st_quart5</th>\n",
       "      <td>-0.308685</td>\n",
       "      <td>0.943100</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            coefficient  p-values\n",
       "mean1          0.308439  0.827577\n",
       "3rd_quart1     0.384309  0.812175\n",
       "max2           0.409483  0.540287\n",
       "median3        0.226237  0.749297\n",
       "min5          -0.439377  0.661229\n",
       "max5          -0.645561  0.450377\n",
       "mean5         -0.280896  0.961755\n",
       "1st_quart5    -0.308685  0.943100"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logitReg = LogisticReg()\n",
    "x_train = x_train.iloc[:, selected_indices]\n",
    "logitReg.fit(x_train, y_train)\n",
    "\n",
    "df = pd.DataFrame()\n",
    "df['coefficient'] = classifier.coef_.flatten()\n",
    "df['p-values'] = logitReg.p_values\n",
    "df.index = selected \n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "v. Test the classifier on the test set. Remember to break the time series in your test set into the same number of time series into which you broke your training set. Remember that the classifier has to be tested using the features\n",
    "extracted from the test set. Compare the accuracy on the test set with the cross-validation accuracy you obtained previously."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy: 1.0\n"
     ]
    }
   ],
   "source": [
    "# since l = 1, no need to break the time series \n",
    "\n",
    "x_test = x_test.iloc[:, selected_indices]\n",
    "\n",
    "logit = LogisticRegression()\n",
    "logit.fit(x_train, y_train)\n",
    "y_pred = logit.predict(x_test)\n",
    "print(\"Test Accuracy: \" + str(metrics.accuracy_score(y_test, y_pred)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Thus, the accuray on the test set and the accuracy of the cross-validation for l = 2, is the same (1.0 for both)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "vi. Do your classes seem to be well-separated to cause instability in calculating logistic regression parameters?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Yes, in fact when trying to run the code below by deleting the comments for the last line, we get PerfectSeparationError... "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import statsmodels.api as sm\n",
    "x_train = x_train.iloc[:, selected_indices]\n",
    "model = sm.Logit(y_train, x_train)\n",
    "# result = model.fit(). PerfectSeparationError: Perfect separation detected, results not available"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "vii. From the confusion matrices you obtained, do you see imbalanced classes? If yes, build a logistic regression model based on case-control sampling and adjust its parameters. Report the confusion matrix, ROC, and AUC of the model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Yes, there is class imbalance, and we fix it below "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix:\n",
      "[[4 0]\n",
      " [0 4]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Area under the curve is 1.0\n"
     ]
    }
   ],
   "source": [
    "from imblearn.under_sampling import RandomUnderSampler\n",
    "\n",
    "split2_train = split_data(train_data2, 1)\n",
    "split2_test = split_data(test_data2, 1)\n",
    "\n",
    "original_train = split2_train\n",
    "original_test = split2_test\n",
    "# encode into 0 or 1 \n",
    "original_train['bending'] = np.where(np.logical_or((original_train.activity == 'bending1'), (original_train.activity == 'bending2')), 0, 1) \n",
    "original_train_binary = original_train.drop('activity', axis = 1)\n",
    "# split the dataset into feature vector and a label vector \n",
    "x_train = pd.DataFrame(original_train_binary, columns = original_train_binary.columns[:-1])\n",
    "y_train = original_train_binary['bending']\n",
    "\n",
    "# encode into 0 or 1 \n",
    "original_test['bending'] = np.where(np.logical_or((original_test.activity == 'bending1'), (original_test.activity == 'bending2')), 0, 1) \n",
    "original_test_binary = original_test.drop('activity', axis = 1)\n",
    "# split the dataset into feature vector and a label vector \n",
    "x_test = pd.DataFrame(original_test_binary, columns = original_test_binary.columns[:-1])\n",
    "y_test = original_test_binary['bending']\n",
    "\n",
    "\n",
    "rus = RandomUnderSampler(return_indices=True)\n",
    "X_resampled, y_resampled, idx_resampled = rus.fit_sample(x_test, y_test)\n",
    "\n",
    "X=X_resampled = pd.DataFrame(X_resampled)\n",
    "y=y_resampled = pd.DataFrame(y_resampled)\n",
    "\n",
    "\n",
    "logit = LogisticRegression()\n",
    "logit.fit(x_train, y_train)\n",
    "y_pred = logit.predict(X)\n",
    "\n",
    "print(\"Confusion matrix:\")\n",
    "print(metrics.confusion_matrix(y, y_pred))\n",
    "\n",
    "fpr, tpr, thresh = roc_curve(y, y_pred)\n",
    "plt.figure()\n",
    "plt.plot(fpr, tpr)\n",
    "plt.plot([0, 1], [0, 1],'r--')\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.show()\n",
    "\n",
    "auc = roc_auc_score(y, y_pred)\n",
    "print(\"Area under the curve is \" + str(auc))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(e) Binary Classification Using L1-penalized logistic regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "i. Repeat 1(d)iii using L1-penalized logistic regression, i.e. instead of using p-values for variable selection, use L1 regularization. Note that in this problem, you have to cross-validate for both l, the number of time series into which you break each of your instances, and λ, the weight of L1 penalty in your logistic regression objective function (or C, the budget). Packages usually perform cross-validation for λ automatically."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "values of C used for cross validation:\n",
      "[  1.00000000e-10   1.00000000e-09   1.00000000e-08   1.00000000e-07\n",
      "   1.00000000e-06   1.00000000e-05   1.00000000e-04   1.00000000e-03\n",
      "   1.00000000e-02   1.00000000e-01   1.00000000e-01   2.00000000e-01\n",
      "   3.00000000e-01   4.00000000e-01   5.00000000e-01   6.00000000e-01\n",
      "   7.00000000e-01   8.00000000e-01   9.00000000e-01   1.00000000e+00\n",
      "   2.00000000e+00   3.00000000e+00   4.00000000e+00   5.00000000e+00\n",
      "   6.00000000e+00   7.00000000e+00   8.00000000e+00   9.00000000e+00\n",
      "   1.00000000e+01   1.00000000e+02   1.00000000e+03   1.00000000e+04\n",
      "   1.00000000e+05   1.00000000e+06   1.00000000e+07   1.00000000e+08\n",
      "   1.00000000e+09   1.00000000e+10]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegressionCV\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn import preprocessing\n",
    "\n",
    "print(\"values of C used for cross validation:\")\n",
    "c_vals = np.append(np.logspace(-10,-1,10),np.arange(0.1, 1, 0.1))\n",
    "c_vals = np.append(c_vals, range(1,10))\n",
    "c_vals = np.append(c_vals, np.logspace(1,10,10))\n",
    "print(c_vals)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "best_Cs = []\n",
    "cv_scores = []\n",
    "for l in range(1, 21):\n",
    "    train = split_data(train_data2, l)\n",
    "    original_train = train\n",
    "    \n",
    "    # encode into 0 or 1 \n",
    "    original_train['bending'] = np.where(np.logical_or((original_train.activity == 'bending1'), (original_train.activity == 'bending2')), 0, 1) \n",
    "    original_train_binary = original_train.drop('activity', axis = 1)\n",
    "    # split the dataset into feature vector and a label vector \n",
    "    x_train = pd.DataFrame(original_train_binary, columns = original_train_binary.columns[:-1])\n",
    "    y_train = original_train_binary['bending']\n",
    "    \n",
    "    #standardize features\n",
    "    x_train = preprocessing.scale(x_train)\n",
    "    \n",
    "    logit_l1 = LogisticRegression(penalty='l1', solver='liblinear')\n",
    "    param_grid = {'C': c_vals}\n",
    "    clf = GridSearchCV(logit_l1, param_grid, cv=StratifiedKFold(5), scoring='accuracy')\n",
    "    clf.fit(x_train, y_train)\n",
    "    best_Cs.append(clf.best_params_[\"C\"])\n",
    "    cv_scores.append(clf.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best value of l is 1, and its corresponding best C is 0.3\n"
     ]
    }
   ],
   "source": [
    "best_l = np.argmax(cv_scores)+1\n",
    "best_c = best_Cs[best_l-1]\n",
    "print(\"The best value of l is \" + str(best_l) + \", and its corresponding best C is \" + str(best_c))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Test accuracy for L1 Penalty (when l=1 and corresponding C = 0.3): 0.894736842105\n"
     ]
    }
   ],
   "source": [
    "train = split_data(train_data2, 1)\n",
    "original_train = train\n",
    "    \n",
    "# encode into 0 or 1 \n",
    "original_train['bending'] = np.where(np.logical_or((original_train.activity == 'bending1'), (original_train.activity == 'bending2')), 0, 1) \n",
    "original_train_binary = original_train.drop('activity', axis = 1)\n",
    "# split the dataset into feature vector and a label vector \n",
    "x_train = pd.DataFrame(original_train_binary, columns = original_train_binary.columns[:-1])\n",
    "y_train = original_train_binary['bending']\n",
    "#standardize features\n",
    "x_train = preprocessing.scale(x_train)\n",
    "\n",
    "test = split_data(test_data2, 1)\n",
    "original_test = test\n",
    "\n",
    "# encode into 0 or 1 \n",
    "original_test['bending'] = np.where(np.logical_or((original_test.activity == 'bending1'), (original_test.activity == 'bending2')), 0, 1) \n",
    "original_test_binary = original_test.drop('activity', axis = 1)\n",
    "# split the dataset into feature vector and a label vector \n",
    "x_test = pd.DataFrame(original_test_binary, columns = original_test_binary.columns[:-1])\n",
    "y_test = original_test_binary['bending']\n",
    "# standarize features \n",
    "x_test = preprocessing.scale(x_test)\n",
    "\n",
    "\n",
    "#refit using the best C\n",
    "clf = LogisticRegression(penalty='l1', solver='liblinear', C=0.3)\n",
    "clf.fit(x_train, y_train)\n",
    "print(\"Best Test accuracy for L1 Penalty (when l=1 and corresponding C = 0.3): \" + str(clf.score(x_test, y_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ii. Compare the L1-penalized with variable selection using p-values. Which one performs better? Which one is easier to implement?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Variable Selection using p-values (or since I used backward selection) gives better test accuracy. \n",
    "- However, it is easier to implement L1-penalized logistic regression since it is a callable sklearn library as opposed to variable selection using p-values, where sklearn does not explicitly gives p-values. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(f) Multi-class Classification (The Realistic Case)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "i. Find the best l in the same way as you found it in 1(e)i to build an L1-penalized multinomial regression model to classify all activities in your training set. Report your test error. Research how confusion matrices and ROC curves are defined for multiclass classification and show them for this problem if possible."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "activity_encoding = {a : i for i, a in enumerate(activities)}\n",
    "\n",
    "best_Cs = []\n",
    "cv_scores = []\n",
    "for o in range(1, 21):\n",
    "    train = split_data(train_data2, o)\n",
    "    original_train = train\n",
    "    \n",
    "    original_train_binary = original_train.drop('activity', axis = 1)\n",
    "    # split the dataset into feature vector and a label vector \n",
    "    x_train = pd.DataFrame(original_train_binary, columns = original_train_binary.columns[:-1])\n",
    "    y_train = original_train['activity'].apply(lambda a: activity_encoding[a])\n",
    "    \n",
    "    #standardize features\n",
    "    x_train = preprocessing.scale(x_train)\n",
    "    \n",
    "    multi_logit = LogisticRegression(penalty='l1', tol=0.01, solver='saga', multi_class='multinomial')\n",
    "    param_grid = {'C': c_vals}\n",
    "    clf = GridSearchCV(multi_logit, param_grid, cv=StratifiedKFold(5), scoring='accuracy')\n",
    "    clf.fit(x_train, y_train)\n",
    "    best_Cs.append(clf.best_params_[\"C\"])\n",
    "    cv_scores.append(clf.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best value of l is 1, and its corresponding best C is 0.7\n"
     ]
    }
   ],
   "source": [
    "best_l = np.argmax(cv_scores)+1\n",
    "best_c = best_Cs[best_l-1]\n",
    "print(\"The best value of l is \" + str(best_l) + \", and its corresponding best C is \" + str(best_c))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Test Error for L1 Penalty (when l=1 and corresponding C = 0.7): 0.0526315789474\n"
     ]
    }
   ],
   "source": [
    "train = split_data(train_data2, 1)\n",
    "original_train = train\n",
    "\n",
    "original_train_binary = original_train.drop('activity', axis = 1)\n",
    "# split the dataset into feature vector and a label vector \n",
    "x_train = pd.DataFrame(original_train_binary, columns = original_train_binary.columns[:-1])\n",
    "y_train = original_train['activity'].apply(lambda a : activity_encoding[a])\n",
    "#standardize features\n",
    "x_train = preprocessing.scale(x_train)\n",
    "\n",
    "test = split_data(test_data2, 1)\n",
    "original_test = test\n",
    "\n",
    "original_test_binary = original_test.drop('activity', axis = 1)\n",
    "# split the dataset into feature vector and a label vector \n",
    "x_test = pd.DataFrame(original_test_binary, columns = original_test_binary.columns[:-1])\n",
    "y_test = original_test['activity'].apply(lambda a : activity_encoding[a])\n",
    "# standarize features \n",
    "x_test = preprocessing.scale(x_test)\n",
    "\n",
    "\n",
    "#refit using the best C\n",
    "clf = LogisticRegression(penalty='l1', tol=0.01, solver='saga', multi_class='multinomial', C = 0.7)\n",
    "clf.fit(x_train, y_train)\n",
    "y_pred = clf.predict(x_test)\n",
    "print(\"Best Test Error for L1 Penalty (when l=1 and corresponding C = 0.7): \" + str(1 - metrics.accuracy_score(y_test, y_pred)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[2, 0, 0, 0, 0, 0, 0],\n",
       "       [0, 2, 0, 0, 0, 0, 0],\n",
       "       [0, 0, 3, 0, 0, 0, 0],\n",
       "       [0, 0, 0, 3, 0, 0, 0],\n",
       "       [0, 0, 0, 0, 3, 0, 0],\n",
       "       [0, 0, 0, 0, 1, 2, 0],\n",
       "       [0, 0, 0, 0, 0, 0, 3]])"
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Confusion matrix:\")\n",
    "metrics.confusion_matrix(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import auc\n",
    "from sklearn.preprocessing import label_binarize\n",
    "from sklearn.multiclass import OneVsRestClassifier\n",
    "from scipy import interp\n",
    "\n",
    "\n",
    "clf = LogisticRegression(penalty='l1',tol=0.01,multi_class='multinomial', solver='saga', C=0.7)\n",
    "\n",
    "y_train = label_binarize(y_train, classes=range(7))\n",
    "y_test = label_binarize(y_test, classes=range(7))\n",
    "\n",
    "clf = OneVsRestClassifier(clf)\n",
    "score_y = clf.fit(x_train, y_train).decision_function(x_test)\n",
    "\n",
    "fpr = dict()\n",
    "tpr = dict()\n",
    "roc_auc = dict()\n",
    "for i in range(7):\n",
    "    fpr[i], tpr[i], _ = metrics.roc_curve(y_test[:, i], score_y[:, i])\n",
    "    roc_auc[i] = metrics.auc(fpr[i], tpr[i])\n",
    "    plt.plot(fpr[i], tpr[i], lw=2, label=activities[i] + ' (AUC = %0.2f)' % roc_auc[i])\n",
    "plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('ROC')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ii. Repeat 1(f)i using a Naive Bayes’ classifier. Use both Gaussian and Multinomial priors and compare the results."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- (a) Gaussian Prior for Naive Bayes' Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import GaussianNB, MultinomialNB\n",
    "from sklearn.model_selection import cross_val_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "cv_scores = [] \n",
    "for q in range(1, 21):\n",
    "    train = split_data(train_data2, q)\n",
    "    original_train = train\n",
    "    \n",
    "    original_train_binary = original_train.drop('activity', axis = 1)\n",
    "    # split the dataset into feature vector and a label vector \n",
    "    x_train = pd.DataFrame(original_train_binary, columns = original_train_binary.columns[:-1])\n",
    "    y_train = original_train['activity'].apply(lambda a: activity_encoding[a])\n",
    "    \n",
    "    #standardize features\n",
    "    x_train = preprocessing.scale(x_train)\n",
    "    \n",
    "    clf = GaussianNB()\n",
    "    score = cross_val_score(clf, x_train, y_train, cv=5).mean()\n",
    "    cv_scores.append(score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best value of l is 2\n"
     ]
    }
   ],
   "source": [
    "best_l = np.argmax(cv_scores)+1\n",
    "print(\"The best value of l is \" + str(best_l))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Test error for 0.105263157895\n"
     ]
    }
   ],
   "source": [
    "train = split_data(train_data2, 2)\n",
    "original_train = train\n",
    "    \n",
    "original_train_binary = original_train.drop('activity', axis = 1)\n",
    "# split the dataset into feature vector and a label vector \n",
    "x_train = pd.DataFrame(original_train_binary, columns = original_train_binary.columns[:-1])\n",
    "y_train = original_train['activity'].apply(lambda a : activity_encoding[a])\n",
    "\n",
    "test = split_data(test_data2, 2)\n",
    "original_test = test\n",
    "\n",
    "original_test_binary = original_test.drop('activity', axis = 1)\n",
    "# split the dataset into feature vector and a label vector \n",
    "x_test = pd.DataFrame(original_test_binary, columns = original_test_binary.columns[:-1])\n",
    "y_test = original_test['activity'].apply(lambda a : activity_encoding[a])\n",
    "\n",
    "clf = GaussianNB()\n",
    "clf.fit(x_train, y_train)\n",
    "y_pred =  clf.predict(x_test)\n",
    "print(\"Best Test error for \" + str(1 - metrics.accuracy_score(y_test, y_pred)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[4, 0, 0, 0, 0, 0, 0],\n",
       "       [0, 4, 0, 0, 0, 0, 0],\n",
       "       [0, 0, 6, 0, 0, 0, 0],\n",
       "       [0, 0, 0, 6, 0, 0, 0],\n",
       "       [0, 0, 0, 1, 4, 1, 0],\n",
       "       [0, 0, 0, 0, 2, 4, 0],\n",
       "       [0, 0, 0, 0, 0, 0, 6]])"
      ]
     },
     "execution_count": 235,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Confusion matrix:\")\n",
    "metrics.confusion_matrix(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_train = label_binarize(y_train, classes=range(7))\n",
    "y_test = label_binarize(y_test, classes=range(7))\n",
    "clf = GaussianNB()\n",
    "\n",
    "fpr = dict()\n",
    "tpr = dict()\n",
    "roc_auc = dict()\n",
    "for i in range(7):\n",
    "    clf = clf.fit(x_train, y_train[:, i])\n",
    "    y_score = clf.predict_proba(x_test)\n",
    "    fpr[i], tpr[i], _ = metrics.roc_curve(y_test[:, i], y_score[:,1])\n",
    "    roc_auc[i] = metrics.auc(fpr[i], tpr[i])\n",
    "    plt.plot(fpr[i], tpr[i], lw=2, label=activities[i] + ' (AUC = %0.2f)' % roc_auc[i])\n",
    "plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('ROC')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- (b) Multinomial Prior for Naive Bayes' Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "cv_scores = [] \n",
    "for d in range(1, 21):\n",
    "    train = split_data(train_data2, d)\n",
    "    original_train = train\n",
    "    \n",
    "    original_train_binary = original_train.drop('activity', axis = 1)\n",
    "    # split the dataset into feature vector and a label vector \n",
    "    x_train = pd.DataFrame(original_train_binary, columns = original_train_binary.columns[:-1])\n",
    "    y_train = original_train['activity'].apply(lambda a: activity_encoding[a])\n",
    "    \n",
    "    clf = MultinomialNB()\n",
    "    score = cross_val_score(clf, x_train, y_train, cv=5).mean()\n",
    "    cv_scores.append(score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best value of l is 1\n"
     ]
    }
   ],
   "source": [
    "best_l = np.argmax(cv_scores)+1\n",
    "print(\"The best value of l is \" + str(best_l))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Test error for 0.105263157895\n"
     ]
    }
   ],
   "source": [
    "train = split_data(train_data2, 1)\n",
    "original_train = train\n",
    "    \n",
    "original_train_binary = original_train.drop('activity', axis = 1)\n",
    "# split the dataset into feature vector and a label vector \n",
    "x_train = pd.DataFrame(original_train_binary, columns = original_train_binary.columns[:-1])\n",
    "y_train = original_train['activity'].apply(lambda a : activity_encoding[a])\n",
    "\n",
    "test = split_data(test_data2, 1)\n",
    "original_test = test\n",
    "\n",
    "original_test_binary = original_test.drop('activity', axis = 1)\n",
    "# split the dataset into feature vector and a label vector \n",
    "x_test = pd.DataFrame(original_test_binary, columns = original_test_binary.columns[:-1])\n",
    "y_test = original_test['activity'].apply(lambda a : activity_encoding[a])\n",
    "\n",
    "clf = MultinomialNB()\n",
    "clf.fit(x_train, y_train)\n",
    "y_pred =  clf.predict(x_test)\n",
    "print(\"Best Test error for \" + str(1 - metrics.accuracy_score(y_test, y_pred)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[2, 0, 0, 0, 0, 0, 0],\n",
       "       [0, 2, 0, 0, 0, 0, 0],\n",
       "       [0, 0, 3, 0, 0, 0, 0],\n",
       "       [0, 0, 0, 3, 0, 0, 0],\n",
       "       [0, 0, 0, 0, 2, 1, 0],\n",
       "       [0, 0, 0, 1, 0, 2, 0],\n",
       "       [0, 0, 0, 0, 0, 0, 3]])"
      ]
     },
     "execution_count": 253,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Confusion matrix:\")\n",
    "metrics.confusion_matrix(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_train = label_binarize(y_train, classes=range(7))\n",
    "y_test = label_binarize(y_test, classes=range(7))\n",
    "clf = MultinomialNB()\n",
    "\n",
    "fpr = dict()\n",
    "tpr = dict()\n",
    "roc_auc = dict()\n",
    "for i in range(7):\n",
    "    clf = clf.fit(x_train, y_train[:, i])\n",
    "    y_score = clf.predict_proba(x_test)\n",
    "    fpr[i], tpr[i], _ = metrics.roc_curve(y_test[:, i], y_score[:,1])\n",
    "    roc_auc[i] = metrics.auc(fpr[i], tpr[i])\n",
    "    plt.plot(fpr[i], tpr[i], lw=2, label=activities[i] + ' (AUC = %0.2f)' % roc_auc[i])\n",
    "plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('ROC')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "iii. Which method is better for multi-class classification in this problem?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- If comparing the single best test error, L1-penalized multinomial regression seems to work the best as it has the lowest test error when l = 1. \n",
    "- When computing the average AUC for all classes, Multinomial has average AUC of 0.92, Gaussian has average AUC of 0.962, and L1-penalized has average AUC of 0.964. So, we can conlcude L1-penalized works the best. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
